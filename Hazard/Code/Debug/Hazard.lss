
Hazard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000281e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  0000281e  000028b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000b8  008000b8  0000290a  2**0
                  ALLOC
  3 .stab         000023b8  00000000  00000000  0000290c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e31  00000000  00000000  00004cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005c35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000079ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000088d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009688  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000097e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a243  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e1       	ldi	r30, 0x1E	; 30
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3b       	cpi	r26, 0xB8	; 184
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 eb       	ldi	r26, 0xB8	; 184
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3b       	cpi	r26, 0xBA	; 186
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 53 13 	call	0x26a6	; 0x26a6 <main>
      8a:	0c 94 0d 14 	jmp	0x281a	; 0x281a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e9       	ldi	r26, 0x95	; 149
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e9       	ldi	r24, 0x95	; 149
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 e2 13 	jmp	0x27c4	; 0x27c4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 fe 13 	jmp	0x27fc	; 0x27fc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 02 14 	jmp	0x2804	; 0x2804 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Void_App_Init>:

ModeState Mode  ;
ModeState Previous_State;

void  Void_App_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	 SSD_Init						(SSD_RIGHT);
     b4e:	80 91 9d 00 	lds	r24, 0x009D
     b52:	90 91 9e 00 	lds	r25, 0x009E
     b56:	a0 91 9f 00 	lds	r26, 0x009F
     b5a:	b0 91 a0 00 	lds	r27, 0x00A0
     b5e:	bc 01       	movw	r22, r24
     b60:	cd 01       	movw	r24, r26
     b62:	0e 94 4d 12 	call	0x249a	; 0x249a <SSD_Init>
	 SSD_Init						(SSD_LEFT);
     b66:	80 91 a1 00 	lds	r24, 0x00A1
     b6a:	90 91 a2 00 	lds	r25, 0x00A2
     b6e:	a0 91 a3 00 	lds	r26, 0x00A3
     b72:	b0 91 a4 00 	lds	r27, 0x00A4
     b76:	bc 01       	movw	r22, r24
     b78:	cd 01       	movw	r24, r26
     b7a:	0e 94 4d 12 	call	0x249a	; 0x249a <SSD_Init>
	 SW_Init						(SW_RIGHT);
     b7e:	60 91 a5 00 	lds	r22, 0x00A5
     b82:	70 91 a6 00 	lds	r23, 0x00A6
     b86:	80 91 a7 00 	lds	r24, 0x00A7
     b8a:	0e 94 f7 12 	call	0x25ee	; 0x25ee <SW_Init>
	 SW_Init						(SW_LEFT);
     b8e:	60 91 a8 00 	lds	r22, 0x00A8
     b92:	70 91 a9 00 	lds	r23, 0x00A9
     b96:	80 91 aa 00 	lds	r24, 0x00AA
     b9a:	0e 94 f7 12 	call	0x25ee	; 0x25ee <SW_Init>
	 SW_Init						(SW_HAZARD);
     b9e:	60 91 ab 00 	lds	r22, 0x00AB
     ba2:	70 91 ac 00 	lds	r23, 0x00AC
     ba6:	80 91 ad 00 	lds	r24, 0x00AD
     baa:	0e 94 f7 12 	call	0x25ee	; 0x25ee <SW_Init>
	 Void_Clcd_Init                 ( );
     bae:	0e 94 b5 07 	call	0xf6a	; 0xf6a <Void_Clcd_Init>
	 Void_ClearScreen               ( );
     bb2:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <Void_ClearScreen>
	 Void_SetMode					(Idle);
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Void_SetMode>
}
     bbc:	cf 91       	pop	r28
     bbe:	df 91       	pop	r29
     bc0:	08 95       	ret

00000bc2 <Void_SetMode>:

void Void_SetMode(ModeState Mode)
{
     bc2:	df 93       	push	r29
     bc4:	cf 93       	push	r28
     bc6:	00 d0       	rcall	.+0      	; 0xbc8 <Void_SetMode+0x6>
     bc8:	0f 92       	push	r0
     bca:	cd b7       	in	r28, 0x3d	; 61
     bcc:	de b7       	in	r29, 0x3e	; 62
     bce:	89 83       	std	Y+1, r24	; 0x01
	switch (Mode)
     bd0:	89 81       	ldd	r24, Y+1	; 0x01
     bd2:	28 2f       	mov	r18, r24
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	3b 83       	std	Y+3, r19	; 0x03
     bd8:	2a 83       	std	Y+2, r18	; 0x02
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	9b 81       	ldd	r25, Y+3	; 0x03
     bde:	81 30       	cpi	r24, 0x01	; 1
     be0:	91 05       	cpc	r25, r1
     be2:	09 f4       	brne	.+2      	; 0xbe6 <Void_SetMode+0x24>
     be4:	63 c0       	rjmp	.+198    	; 0xcac <Void_SetMode+0xea>
     be6:	2a 81       	ldd	r18, Y+2	; 0x02
     be8:	3b 81       	ldd	r19, Y+3	; 0x03
     bea:	22 30       	cpi	r18, 0x02	; 2
     bec:	31 05       	cpc	r19, r1
     bee:	2c f4       	brge	.+10     	; 0xbfa <Void_SetMode+0x38>
     bf0:	8a 81       	ldd	r24, Y+2	; 0x02
     bf2:	9b 81       	ldd	r25, Y+3	; 0x03
     bf4:	00 97       	sbiw	r24, 0x00	; 0
     bf6:	69 f0       	breq	.+26     	; 0xc12 <Void_SetMode+0x50>
     bf8:	bd c0       	rjmp	.+378    	; 0xd74 <Void_SetMode+0x1b2>
     bfa:	2a 81       	ldd	r18, Y+2	; 0x02
     bfc:	3b 81       	ldd	r19, Y+3	; 0x03
     bfe:	22 30       	cpi	r18, 0x02	; 2
     c00:	31 05       	cpc	r19, r1
     c02:	41 f1       	breq	.+80     	; 0xc54 <Void_SetMode+0x92>
     c04:	8a 81       	ldd	r24, Y+2	; 0x02
     c06:	9b 81       	ldd	r25, Y+3	; 0x03
     c08:	83 30       	cpi	r24, 0x03	; 3
     c0a:	91 05       	cpc	r25, r1
     c0c:	09 f4       	brne	.+2      	; 0xc10 <Void_SetMode+0x4e>
     c0e:	7a c0       	rjmp	.+244    	; 0xd04 <Void_SetMode+0x142>
     c10:	b1 c0       	rjmp	.+354    	; 0xd74 <Void_SetMode+0x1b2>
	{

	case Idle :

		Void_ClearScreen               	( );
     c12:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <Void_ClearScreen>
		SSD_Disable						(SSD_RIGHT);
     c16:	80 91 9d 00 	lds	r24, 0x009D
     c1a:	90 91 9e 00 	lds	r25, 0x009E
     c1e:	a0 91 9f 00 	lds	r26, 0x009F
     c22:	b0 91 a0 00 	lds	r27, 0x00A0
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 92 12 	call	0x2524	; 0x2524 <SSD_Disable>
		SSD_Disable						(SSD_LEFT);
     c2e:	80 91 a1 00 	lds	r24, 0x00A1
     c32:	90 91 a2 00 	lds	r25, 0x00A2
     c36:	a0 91 a3 00 	lds	r26, 0x00A3
     c3a:	b0 91 a4 00 	lds	r27, 0x00A4
     c3e:	bc 01       	movw	r22, r24
     c40:	cd 01       	movw	r24, r26
     c42:	0e 94 92 12 	call	0x2524	; 0x2524 <SSD_Disable>
		Void_ClearScreen               	( );
     c46:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <Void_ClearScreen>
		Void_SendString                	((u8*)"Idle Mode");
     c4a:	80 e6       	ldi	r24, 0x60	; 96
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Void_SendString>
     c52:	90 c0       	rjmp	.+288    	; 0xd74 <Void_SetMode+0x1b2>
		break;

	case RIGHT_BLINK :

		SSD_Disable						(SSD_LEFT);
     c54:	80 91 a1 00 	lds	r24, 0x00A1
     c58:	90 91 a2 00 	lds	r25, 0x00A2
     c5c:	a0 91 a3 00 	lds	r26, 0x00A3
     c60:	b0 91 a4 00 	lds	r27, 0x00A4
     c64:	bc 01       	movw	r22, r24
     c66:	cd 01       	movw	r24, r26
     c68:	0e 94 92 12 	call	0x2524	; 0x2524 <SSD_Disable>
		Void_ClearScreen               	( );
     c6c:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <Void_ClearScreen>
		Void_SendString                	((u8*)"Right Led Blink");
     c70:	8a e6       	ldi	r24, 0x6A	; 106
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Void_SendString>
		SSD_Enable						(SSD_RIGHT );
     c78:	80 91 9d 00 	lds	r24, 0x009D
     c7c:	90 91 9e 00 	lds	r25, 0x009E
     c80:	a0 91 9f 00 	lds	r26, 0x009F
     c84:	b0 91 a0 00 	lds	r27, 0x00A0
     c88:	bc 01       	movw	r22, r24
     c8a:	cd 01       	movw	r24, r26
     c8c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SSD_Enable>
		SSD_SendNumber					( SSD_RIGHT, 0);
     c90:	80 91 9d 00 	lds	r24, 0x009D
     c94:	90 91 9e 00 	lds	r25, 0x009E
     c98:	a0 91 9f 00 	lds	r26, 0x009F
     c9c:	b0 91 a0 00 	lds	r27, 0x00A0
     ca0:	bc 01       	movw	r22, r24
     ca2:	cd 01       	movw	r24, r26
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	0e 94 c2 12 	call	0x2584	; 0x2584 <SSD_SendNumber>
     caa:	64 c0       	rjmp	.+200    	; 0xd74 <Void_SetMode+0x1b2>
		break;

	case lEFT_BLINK :

		SSD_Disable						(SSD_RIGHT);
     cac:	80 91 9d 00 	lds	r24, 0x009D
     cb0:	90 91 9e 00 	lds	r25, 0x009E
     cb4:	a0 91 9f 00 	lds	r26, 0x009F
     cb8:	b0 91 a0 00 	lds	r27, 0x00A0
     cbc:	bc 01       	movw	r22, r24
     cbe:	cd 01       	movw	r24, r26
     cc0:	0e 94 92 12 	call	0x2524	; 0x2524 <SSD_Disable>
		Void_ClearScreen               	( );
     cc4:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <Void_ClearScreen>
		Void_SendString                	((u8*)"Left Led Blink");
     cc8:	8a e7       	ldi	r24, 0x7A	; 122
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Void_SendString>
		SSD_Enable						(SSD_LEFT );
     cd0:	80 91 a1 00 	lds	r24, 0x00A1
     cd4:	90 91 a2 00 	lds	r25, 0x00A2
     cd8:	a0 91 a3 00 	lds	r26, 0x00A3
     cdc:	b0 91 a4 00 	lds	r27, 0x00A4
     ce0:	bc 01       	movw	r22, r24
     ce2:	cd 01       	movw	r24, r26
     ce4:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SSD_Enable>
		SSD_SendNumber					( SSD_LEFT, 0);
     ce8:	80 91 a1 00 	lds	r24, 0x00A1
     cec:	90 91 a2 00 	lds	r25, 0x00A2
     cf0:	a0 91 a3 00 	lds	r26, 0x00A3
     cf4:	b0 91 a4 00 	lds	r27, 0x00A4
     cf8:	bc 01       	movw	r22, r24
     cfa:	cd 01       	movw	r24, r26
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	0e 94 c2 12 	call	0x2584	; 0x2584 <SSD_SendNumber>
     d02:	38 c0       	rjmp	.+112    	; 0xd74 <Void_SetMode+0x1b2>
	break;

	case HAZZARD_BLINK :

		Void_ClearScreen               	( );
     d04:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <Void_ClearScreen>
		Void_SendString                	((u8*)"Hazard Mode");
     d08:	89 e8       	ldi	r24, 0x89	; 137
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Void_SendString>
		SSD_Enable						( SSD_LEFT );
     d10:	80 91 a1 00 	lds	r24, 0x00A1
     d14:	90 91 a2 00 	lds	r25, 0x00A2
     d18:	a0 91 a3 00 	lds	r26, 0x00A3
     d1c:	b0 91 a4 00 	lds	r27, 0x00A4
     d20:	bc 01       	movw	r22, r24
     d22:	cd 01       	movw	r24, r26
     d24:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SSD_Enable>
		SSD_Enable						( SSD_RIGHT );
     d28:	80 91 9d 00 	lds	r24, 0x009D
     d2c:	90 91 9e 00 	lds	r25, 0x009E
     d30:	a0 91 9f 00 	lds	r26, 0x009F
     d34:	b0 91 a0 00 	lds	r27, 0x00A0
     d38:	bc 01       	movw	r22, r24
     d3a:	cd 01       	movw	r24, r26
     d3c:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SSD_Enable>
		SSD_SendNumber					( SSD_LEFT, 0);
     d40:	80 91 a1 00 	lds	r24, 0x00A1
     d44:	90 91 a2 00 	lds	r25, 0x00A2
     d48:	a0 91 a3 00 	lds	r26, 0x00A3
     d4c:	b0 91 a4 00 	lds	r27, 0x00A4
     d50:	bc 01       	movw	r22, r24
     d52:	cd 01       	movw	r24, r26
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	0e 94 c2 12 	call	0x2584	; 0x2584 <SSD_SendNumber>
		SSD_SendNumber					( SSD_RIGHT, 0);
     d5a:	80 91 9d 00 	lds	r24, 0x009D
     d5e:	90 91 9e 00 	lds	r25, 0x009E
     d62:	a0 91 9f 00 	lds	r26, 0x009F
     d66:	b0 91 a0 00 	lds	r27, 0x00A0
     d6a:	bc 01       	movw	r22, r24
     d6c:	cd 01       	movw	r24, r26
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	0e 94 c2 12 	call	0x2584	; 0x2584 <SSD_SendNumber>
		break;

	}
}
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <MODE_vidIdle>:


void MODE_vidIdle (void)
{
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	cd b7       	in	r28, 0x3d	; 61
     d86:	de b7       	in	r29, 0x3e	; 62
	Void_SetMode(Idle);
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Void_SetMode>
	if(SW_GetPressed(SW_LEFT))
     d8e:	60 91 a8 00 	lds	r22, 0x00A8
     d92:	70 91 a9 00 	lds	r23, 0x00A9
     d96:	80 91 aa 00 	lds	r24, 0x00AA
     d9a:	0e 94 15 13 	call	0x262a	; 0x262a <SW_GetPressed>
     d9e:	88 23       	and	r24, r24
     da0:	21 f0       	breq	.+8      	; 0xdaa <MODE_vidIdle+0x2a>
	{
		Mode = lEFT_BLINK;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	80 93 b9 00 	sts	0x00B9, r24
     da8:	1d c0       	rjmp	.+58     	; 0xde4 <MODE_vidIdle+0x64>
	}
	else if(SW_GetPressed(SW_RIGHT))
     daa:	60 91 a5 00 	lds	r22, 0x00A5
     dae:	70 91 a6 00 	lds	r23, 0x00A6
     db2:	80 91 a7 00 	lds	r24, 0x00A7
     db6:	0e 94 15 13 	call	0x262a	; 0x262a <SW_GetPressed>
     dba:	88 23       	and	r24, r24
     dbc:	21 f0       	breq	.+8      	; 0xdc6 <MODE_vidIdle+0x46>
	{
		Mode = RIGHT_BLINK;
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	80 93 b9 00 	sts	0x00B9, r24
     dc4:	0f c0       	rjmp	.+30     	; 0xde4 <MODE_vidIdle+0x64>
	}
	else if(SW_GetPressed(SW_HAZARD))
     dc6:	60 91 ab 00 	lds	r22, 0x00AB
     dca:	70 91 ac 00 	lds	r23, 0x00AC
     dce:	80 91 ad 00 	lds	r24, 0x00AD
     dd2:	0e 94 15 13 	call	0x262a	; 0x262a <SW_GetPressed>
     dd6:	88 23       	and	r24, r24
     dd8:	29 f0       	breq	.+10     	; 0xde4 <MODE_vidIdle+0x64>
	{
		Previous_State = Idle;
     dda:	10 92 b8 00 	sts	0x00B8, r1
		Mode = HAZZARD_BLINK;
     dde:	83 e0       	ldi	r24, 0x03	; 3
     de0:	80 93 b9 00 	sts	0x00B9, r24
	}
}
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <MODE_vidRightBlink>:
void MODE_vidRightBlink (void)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
	Void_SetMode(RIGHT_BLINK);
     df2:	82 e0       	ldi	r24, 0x02	; 2
     df4:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Void_SetMode>
	if(SW_GetPressed(SW_LEFT))
     df8:	60 91 a8 00 	lds	r22, 0x00A8
     dfc:	70 91 a9 00 	lds	r23, 0x00A9
     e00:	80 91 aa 00 	lds	r24, 0x00AA
     e04:	0e 94 15 13 	call	0x262a	; 0x262a <SW_GetPressed>
     e08:	88 23       	and	r24, r24
     e0a:	19 f0       	breq	.+6      	; 0xe12 <MODE_vidRightBlink+0x28>
	{
		Mode = Idle;
     e0c:	10 92 b9 00 	sts	0x00B9, r1
     e10:	1e c0       	rjmp	.+60     	; 0xe4e <MODE_vidRightBlink+0x64>
	}
	else if(SW_GetPressed(SW_RIGHT))
     e12:	60 91 a5 00 	lds	r22, 0x00A5
     e16:	70 91 a6 00 	lds	r23, 0x00A6
     e1a:	80 91 a7 00 	lds	r24, 0x00A7
     e1e:	0e 94 15 13 	call	0x262a	; 0x262a <SW_GetPressed>
     e22:	88 23       	and	r24, r24
     e24:	21 f0       	breq	.+8      	; 0xe2e <MODE_vidRightBlink+0x44>
	{
		Mode = RIGHT_BLINK;
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	80 93 b9 00 	sts	0x00B9, r24
     e2c:	10 c0       	rjmp	.+32     	; 0xe4e <MODE_vidRightBlink+0x64>
	}
	else if(SW_GetPressed(SW_HAZARD))
     e2e:	60 91 ab 00 	lds	r22, 0x00AB
     e32:	70 91 ac 00 	lds	r23, 0x00AC
     e36:	80 91 ad 00 	lds	r24, 0x00AD
     e3a:	0e 94 15 13 	call	0x262a	; 0x262a <SW_GetPressed>
     e3e:	88 23       	and	r24, r24
     e40:	31 f0       	breq	.+12     	; 0xe4e <MODE_vidRightBlink+0x64>
	{
		Previous_State = RIGHT_BLINK;
     e42:	82 e0       	ldi	r24, 0x02	; 2
     e44:	80 93 b8 00 	sts	0x00B8, r24
		Mode = HAZZARD_BLINK;
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	80 93 b9 00 	sts	0x00B9, r24
	}
}
     e4e:	cf 91       	pop	r28
     e50:	df 91       	pop	r29
     e52:	08 95       	ret

00000e54 <MODE_vIdleftBlink>:
void MODE_vIdleftBlink (void)
{
     e54:	df 93       	push	r29
     e56:	cf 93       	push	r28
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
	Void_SetMode(lEFT_BLINK);
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Void_SetMode>
	if(SW_GetPressed(SW_LEFT))
     e62:	60 91 a8 00 	lds	r22, 0x00A8
     e66:	70 91 a9 00 	lds	r23, 0x00A9
     e6a:	80 91 aa 00 	lds	r24, 0x00AA
     e6e:	0e 94 15 13 	call	0x262a	; 0x262a <SW_GetPressed>
     e72:	88 23       	and	r24, r24
     e74:	21 f0       	breq	.+8      	; 0xe7e <MODE_vIdleftBlink+0x2a>
	{
		Mode = lEFT_BLINK;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	80 93 b9 00 	sts	0x00B9, r24
     e7c:	1d c0       	rjmp	.+58     	; 0xeb8 <MODE_vIdleftBlink+0x64>
	}
	else if(SW_GetPressed(SW_RIGHT))
     e7e:	60 91 a5 00 	lds	r22, 0x00A5
     e82:	70 91 a6 00 	lds	r23, 0x00A6
     e86:	80 91 a7 00 	lds	r24, 0x00A7
     e8a:	0e 94 15 13 	call	0x262a	; 0x262a <SW_GetPressed>
     e8e:	88 23       	and	r24, r24
     e90:	19 f0       	breq	.+6      	; 0xe98 <MODE_vIdleftBlink+0x44>
	{
		Mode = Idle;
     e92:	10 92 b9 00 	sts	0x00B9, r1
     e96:	10 c0       	rjmp	.+32     	; 0xeb8 <MODE_vIdleftBlink+0x64>
	}
	else if(SW_GetPressed(SW_HAZARD))
     e98:	60 91 ab 00 	lds	r22, 0x00AB
     e9c:	70 91 ac 00 	lds	r23, 0x00AC
     ea0:	80 91 ad 00 	lds	r24, 0x00AD
     ea4:	0e 94 15 13 	call	0x262a	; 0x262a <SW_GetPressed>
     ea8:	88 23       	and	r24, r24
     eaa:	31 f0       	breq	.+12     	; 0xeb8 <MODE_vIdleftBlink+0x64>
	{
		Previous_State = lEFT_BLINK;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	80 93 b8 00 	sts	0x00B8, r24
		Mode = HAZZARD_BLINK;
     eb2:	83 e0       	ldi	r24, 0x03	; 3
     eb4:	80 93 b9 00 	sts	0x00B9, r24
	}
}
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <MODE_vidHazardBlink>:
void MODE_vidHazardBlink (void)
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
	Void_SetMode(HAZZARD_BLINK);
     ec6:	83 e0       	ldi	r24, 0x03	; 3
     ec8:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <Void_SetMode>
	if(SW_GetPressed(SW_LEFT))
     ecc:	60 91 a8 00 	lds	r22, 0x00A8
     ed0:	70 91 a9 00 	lds	r23, 0x00A9
     ed4:	80 91 aa 00 	lds	r24, 0x00AA
     ed8:	0e 94 15 13 	call	0x262a	; 0x262a <SW_GetPressed>
     edc:	88 23       	and	r24, r24
     ede:	21 f0       	breq	.+8      	; 0xee8 <MODE_vidHazardBlink+0x2a>
	{
		Mode = HAZZARD_BLINK;
     ee0:	83 e0       	ldi	r24, 0x03	; 3
     ee2:	80 93 b9 00 	sts	0x00B9, r24
     ee6:	1c c0       	rjmp	.+56     	; 0xf20 <MODE_vidHazardBlink+0x62>
	}
	else if(SW_GetPressed(SW_RIGHT))
     ee8:	60 91 a5 00 	lds	r22, 0x00A5
     eec:	70 91 a6 00 	lds	r23, 0x00A6
     ef0:	80 91 a7 00 	lds	r24, 0x00A7
     ef4:	0e 94 15 13 	call	0x262a	; 0x262a <SW_GetPressed>
     ef8:	88 23       	and	r24, r24
     efa:	21 f0       	breq	.+8      	; 0xf04 <MODE_vidHazardBlink+0x46>
	{
		Mode = HAZZARD_BLINK;
     efc:	83 e0       	ldi	r24, 0x03	; 3
     efe:	80 93 b9 00 	sts	0x00B9, r24
     f02:	0e c0       	rjmp	.+28     	; 0xf20 <MODE_vidHazardBlink+0x62>
	}
	else if(SW_GetPressed(SW_HAZARD))
     f04:	60 91 ab 00 	lds	r22, 0x00AB
     f08:	70 91 ac 00 	lds	r23, 0x00AC
     f0c:	80 91 ad 00 	lds	r24, 0x00AD
     f10:	0e 94 15 13 	call	0x262a	; 0x262a <SW_GetPressed>
     f14:	88 23       	and	r24, r24
     f16:	21 f0       	breq	.+8      	; 0xf20 <MODE_vidHazardBlink+0x62>
	{
		Mode = Previous_State;
     f18:	80 91 b8 00 	lds	r24, 0x00B8
     f1c:	80 93 b9 00 	sts	0x00B9, r24
	}
}
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <Void_Mode_Task>:


void Void_Mode_Task(void)
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	cd b7       	in	r28, 0x3d	; 61
     f2c:	de b7       	in	r29, 0x3e	; 62
	if(Mode == Idle)
     f2e:	80 91 b9 00 	lds	r24, 0x00B9
     f32:	88 23       	and	r24, r24
     f34:	19 f4       	brne	.+6      	; 0xf3c <Void_Mode_Task+0x16>
	{
		MODE_vidIdle();
     f36:	0e 94 c0 06 	call	0xd80	; 0xd80 <MODE_vidIdle>
     f3a:	14 c0       	rjmp	.+40     	; 0xf64 <Void_Mode_Task+0x3e>
	}
	else if(Mode == RIGHT_BLINK)
     f3c:	80 91 b9 00 	lds	r24, 0x00B9
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	19 f4       	brne	.+6      	; 0xf4a <Void_Mode_Task+0x24>
	{
		MODE_vidRightBlink();
     f44:	0e 94 f5 06 	call	0xdea	; 0xdea <MODE_vidRightBlink>
     f48:	0d c0       	rjmp	.+26     	; 0xf64 <Void_Mode_Task+0x3e>
	}
	else if(Mode == lEFT_BLINK)
     f4a:	80 91 b9 00 	lds	r24, 0x00B9
     f4e:	81 30       	cpi	r24, 0x01	; 1
     f50:	19 f4       	brne	.+6      	; 0xf58 <Void_Mode_Task+0x32>
	{
		MODE_vIdleftBlink();
     f52:	0e 94 2a 07 	call	0xe54	; 0xe54 <MODE_vIdleftBlink>
     f56:	06 c0       	rjmp	.+12     	; 0xf64 <Void_Mode_Task+0x3e>
	}
	else if(Mode == HAZZARD_BLINK)
     f58:	80 91 b9 00 	lds	r24, 0x00B9
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	11 f4       	brne	.+4      	; 0xf64 <Void_Mode_Task+0x3e>
	{
		MODE_vidHazardBlink();
     f60:	0e 94 5f 07 	call	0xebe	; 0xebe <MODE_vidHazardBlink>
	}
}
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <Void_Clcd_Init>:

#include <avr/delay.h>

//This Function Initialize the LCD according to the 8 Bits Mode 
void Void_Clcd_Init                      (void)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	e8 97       	sbiw	r28, 0x38	; 56
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	a8 e4       	ldi	r26, 0x48	; 72
     f84:	b2 e4       	ldi	r27, 0x42	; 66
     f86:	8d ab       	std	Y+53, r24	; 0x35
     f88:	9e ab       	std	Y+54, r25	; 0x36
     f8a:	af ab       	std	Y+55, r26	; 0x37
     f8c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f8e:	6d a9       	ldd	r22, Y+53	; 0x35
     f90:	7e a9       	ldd	r23, Y+54	; 0x36
     f92:	8f a9       	ldd	r24, Y+55	; 0x37
     f94:	98 ad       	ldd	r25, Y+56	; 0x38
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	4a ef       	ldi	r20, 0xFA	; 250
     f9c:	54 e4       	ldi	r21, 0x44	; 68
     f9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	89 ab       	std	Y+49, r24	; 0x31
     fa8:	9a ab       	std	Y+50, r25	; 0x32
     faa:	ab ab       	std	Y+51, r26	; 0x33
     fac:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fae:	69 a9       	ldd	r22, Y+49	; 0x31
     fb0:	7a a9       	ldd	r23, Y+50	; 0x32
     fb2:	8b a9       	ldd	r24, Y+51	; 0x33
     fb4:	9c a9       	ldd	r25, Y+52	; 0x34
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e8       	ldi	r20, 0x80	; 128
     fbc:	5f e3       	ldi	r21, 0x3F	; 63
     fbe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fc2:	88 23       	and	r24, r24
     fc4:	2c f4       	brge	.+10     	; 0xfd0 <Void_Clcd_Init+0x66>
		__ticks = 1;
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	98 ab       	std	Y+48, r25	; 0x30
     fcc:	8f a7       	std	Y+47, r24	; 0x2f
     fce:	3f c0       	rjmp	.+126    	; 0x104e <Void_Clcd_Init+0xe4>
	else if (__tmp > 65535)
     fd0:	69 a9       	ldd	r22, Y+49	; 0x31
     fd2:	7a a9       	ldd	r23, Y+50	; 0x32
     fd4:	8b a9       	ldd	r24, Y+51	; 0x33
     fd6:	9c a9       	ldd	r25, Y+52	; 0x34
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	3f ef       	ldi	r19, 0xFF	; 255
     fdc:	4f e7       	ldi	r20, 0x7F	; 127
     fde:	57 e4       	ldi	r21, 0x47	; 71
     fe0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe4:	18 16       	cp	r1, r24
     fe6:	4c f5       	brge	.+82     	; 0x103a <Void_Clcd_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe8:	6d a9       	ldd	r22, Y+53	; 0x35
     fea:	7e a9       	ldd	r23, Y+54	; 0x36
     fec:	8f a9       	ldd	r24, Y+55	; 0x37
     fee:	98 ad       	ldd	r25, Y+56	; 0x38
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	40 e2       	ldi	r20, 0x20	; 32
     ff6:	51 e4       	ldi	r21, 0x41	; 65
     ff8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	bc 01       	movw	r22, r24
    1002:	cd 01       	movw	r24, r26
    1004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1008:	dc 01       	movw	r26, r24
    100a:	cb 01       	movw	r24, r22
    100c:	98 ab       	std	Y+48, r25	; 0x30
    100e:	8f a7       	std	Y+47, r24	; 0x2f
    1010:	0f c0       	rjmp	.+30     	; 0x1030 <Void_Clcd_Init+0xc6>
    1012:	88 ec       	ldi	r24, 0xC8	; 200
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9e a7       	std	Y+46, r25	; 0x2e
    1018:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    101a:	8d a5       	ldd	r24, Y+45	; 0x2d
    101c:	9e a5       	ldd	r25, Y+46	; 0x2e
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <Void_Clcd_Init+0xb4>
    1022:	9e a7       	std	Y+46, r25	; 0x2e
    1024:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1026:	8f a5       	ldd	r24, Y+47	; 0x2f
    1028:	98 a9       	ldd	r25, Y+48	; 0x30
    102a:	01 97       	sbiw	r24, 0x01	; 1
    102c:	98 ab       	std	Y+48, r25	; 0x30
    102e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1030:	8f a5       	ldd	r24, Y+47	; 0x2f
    1032:	98 a9       	ldd	r25, Y+48	; 0x30
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	69 f7       	brne	.-38     	; 0x1012 <Void_Clcd_Init+0xa8>
    1038:	14 c0       	rjmp	.+40     	; 0x1062 <Void_Clcd_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    103a:	69 a9       	ldd	r22, Y+49	; 0x31
    103c:	7a a9       	ldd	r23, Y+50	; 0x32
    103e:	8b a9       	ldd	r24, Y+51	; 0x33
    1040:	9c a9       	ldd	r25, Y+52	; 0x34
    1042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1046:	dc 01       	movw	r26, r24
    1048:	cb 01       	movw	r24, r22
    104a:	98 ab       	std	Y+48, r25	; 0x30
    104c:	8f a7       	std	Y+47, r24	; 0x2f
    104e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1050:	98 a9       	ldd	r25, Y+48	; 0x30
    1052:	9c a7       	std	Y+44, r25	; 0x2c
    1054:	8b a7       	std	Y+43, r24	; 0x2b
    1056:	8b a5       	ldd	r24, Y+43	; 0x2b
    1058:	9c a5       	ldd	r25, Y+44	; 0x2c
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <Void_Clcd_Init+0xf0>
    105e:	9c a7       	std	Y+44, r25	; 0x2c
    1060:	8b a7       	std	Y+43, r24	; 0x2b
    _delay_ms(50);
    DIO_enumSetPortDirection     	( CLCD_DATA_PORT     , DIO_PORT_OUTPUT  	);
    1062:	83 e0       	ldi	r24, 0x03	; 3
    1064:	6f ef       	ldi	r22, 0xFF	; 255
    1066:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_enumSetPortDirection>
    DIO_enumSetPinDirection         ( CLCD_CONTROLE_PORT , CLCD_RS , DIO_PIN_OUTPUT  );
    106a:	82 e0       	ldi	r24, 0x02	; 2
    106c:	63 e0       	ldi	r22, 0x03	; 3
    106e:	41 e0       	ldi	r20, 0x01	; 1
    1070:	0e 94 37 0c 	call	0x186e	; 0x186e <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection         ( CLCD_CONTROLE_PORT , CLCD_RW , DIO_PIN_OUTPUT  );
    1074:	82 e0       	ldi	r24, 0x02	; 2
    1076:	64 e0       	ldi	r22, 0x04	; 4
    1078:	41 e0       	ldi	r20, 0x01	; 1
    107a:	0e 94 37 0c 	call	0x186e	; 0x186e <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection         ( CLCD_CONTROLE_PORT , CLCD_EN , DIO_PIN_OUTPUT  );
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	65 e0       	ldi	r22, 0x05	; 5
    1082:	41 e0       	ldi	r20, 0x01	; 1
    1084:	0e 94 37 0c 	call	0x186e	; 0x186e <DIO_enumSetPinDirection>
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	a0 e0       	ldi	r26, 0x00	; 0
    108e:	b0 e4       	ldi	r27, 0x40	; 64
    1090:	8f a3       	std	Y+39, r24	; 0x27
    1092:	98 a7       	std	Y+40, r25	; 0x28
    1094:	a9 a7       	std	Y+41, r26	; 0x29
    1096:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1098:	6f a1       	ldd	r22, Y+39	; 0x27
    109a:	78 a5       	ldd	r23, Y+40	; 0x28
    109c:	89 a5       	ldd	r24, Y+41	; 0x29
    109e:	9a a5       	ldd	r25, Y+42	; 0x2a
    10a0:	20 e0       	ldi	r18, 0x00	; 0
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	4a ef       	ldi	r20, 0xFA	; 250
    10a6:	54 e4       	ldi	r21, 0x44	; 68
    10a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ac:	dc 01       	movw	r26, r24
    10ae:	cb 01       	movw	r24, r22
    10b0:	8b a3       	std	Y+35, r24	; 0x23
    10b2:	9c a3       	std	Y+36, r25	; 0x24
    10b4:	ad a3       	std	Y+37, r26	; 0x25
    10b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10b8:	6b a1       	ldd	r22, Y+35	; 0x23
    10ba:	7c a1       	ldd	r23, Y+36	; 0x24
    10bc:	8d a1       	ldd	r24, Y+37	; 0x25
    10be:	9e a1       	ldd	r25, Y+38	; 0x26
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e8       	ldi	r20, 0x80	; 128
    10c6:	5f e3       	ldi	r21, 0x3F	; 63
    10c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10cc:	88 23       	and	r24, r24
    10ce:	2c f4       	brge	.+10     	; 0x10da <Void_Clcd_Init+0x170>
		__ticks = 1;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	9a a3       	std	Y+34, r25	; 0x22
    10d6:	89 a3       	std	Y+33, r24	; 0x21
    10d8:	3f c0       	rjmp	.+126    	; 0x1158 <Void_Clcd_Init+0x1ee>
	else if (__tmp > 65535)
    10da:	6b a1       	ldd	r22, Y+35	; 0x23
    10dc:	7c a1       	ldd	r23, Y+36	; 0x24
    10de:	8d a1       	ldd	r24, Y+37	; 0x25
    10e0:	9e a1       	ldd	r25, Y+38	; 0x26
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	3f ef       	ldi	r19, 0xFF	; 255
    10e6:	4f e7       	ldi	r20, 0x7F	; 127
    10e8:	57 e4       	ldi	r21, 0x47	; 71
    10ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10ee:	18 16       	cp	r1, r24
    10f0:	4c f5       	brge	.+82     	; 0x1144 <Void_Clcd_Init+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f2:	6f a1       	ldd	r22, Y+39	; 0x27
    10f4:	78 a5       	ldd	r23, Y+40	; 0x28
    10f6:	89 a5       	ldd	r24, Y+41	; 0x29
    10f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	40 e2       	ldi	r20, 0x20	; 32
    1100:	51 e4       	ldi	r21, 0x41	; 65
    1102:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1106:	dc 01       	movw	r26, r24
    1108:	cb 01       	movw	r24, r22
    110a:	bc 01       	movw	r22, r24
    110c:	cd 01       	movw	r24, r26
    110e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	9a a3       	std	Y+34, r25	; 0x22
    1118:	89 a3       	std	Y+33, r24	; 0x21
    111a:	0f c0       	rjmp	.+30     	; 0x113a <Void_Clcd_Init+0x1d0>
    111c:	88 ec       	ldi	r24, 0xC8	; 200
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	98 a3       	std	Y+32, r25	; 0x20
    1122:	8f 8f       	std	Y+31, r24	; 0x1f
    1124:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1126:	98 a1       	ldd	r25, Y+32	; 0x20
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	f1 f7       	brne	.-4      	; 0x1128 <Void_Clcd_Init+0x1be>
    112c:	98 a3       	std	Y+32, r25	; 0x20
    112e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1130:	89 a1       	ldd	r24, Y+33	; 0x21
    1132:	9a a1       	ldd	r25, Y+34	; 0x22
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	9a a3       	std	Y+34, r25	; 0x22
    1138:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113a:	89 a1       	ldd	r24, Y+33	; 0x21
    113c:	9a a1       	ldd	r25, Y+34	; 0x22
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	69 f7       	brne	.-38     	; 0x111c <Void_Clcd_Init+0x1b2>
    1142:	14 c0       	rjmp	.+40     	; 0x116c <Void_Clcd_Init+0x202>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1144:	6b a1       	ldd	r22, Y+35	; 0x23
    1146:	7c a1       	ldd	r23, Y+36	; 0x24
    1148:	8d a1       	ldd	r24, Y+37	; 0x25
    114a:	9e a1       	ldd	r25, Y+38	; 0x26
    114c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	9a a3       	std	Y+34, r25	; 0x22
    1156:	89 a3       	std	Y+33, r24	; 0x21
    1158:	89 a1       	ldd	r24, Y+33	; 0x21
    115a:	9a a1       	ldd	r25, Y+34	; 0x22
    115c:	9e 8f       	std	Y+30, r25	; 0x1e
    115e:	8d 8f       	std	Y+29, r24	; 0x1d
    1160:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1162:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	f1 f7       	brne	.-4      	; 0x1164 <Void_Clcd_Init+0x1fa>
    1168:	9e 8f       	std	Y+30, r25	; 0x1e
    116a:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(2);
    Void_SendCommand(0x0f);
    116c:	8f e0       	ldi	r24, 0x0F	; 15
    116e:	0e 94 ac 09 	call	0x1358	; 0x1358 <Void_SendCommand>
    1172:	80 e0       	ldi	r24, 0x00	; 0
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	a0 e0       	ldi	r26, 0x00	; 0
    1178:	b0 e4       	ldi	r27, 0x40	; 64
    117a:	89 8f       	std	Y+25, r24	; 0x19
    117c:	9a 8f       	std	Y+26, r25	; 0x1a
    117e:	ab 8f       	std	Y+27, r26	; 0x1b
    1180:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1182:	69 8d       	ldd	r22, Y+25	; 0x19
    1184:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1186:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1188:	9c 8d       	ldd	r25, Y+28	; 0x1c
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	4a ef       	ldi	r20, 0xFA	; 250
    1190:	54 e4       	ldi	r21, 0x44	; 68
    1192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1196:	dc 01       	movw	r26, r24
    1198:	cb 01       	movw	r24, r22
    119a:	8d 8b       	std	Y+21, r24	; 0x15
    119c:	9e 8b       	std	Y+22, r25	; 0x16
    119e:	af 8b       	std	Y+23, r26	; 0x17
    11a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11a2:	6d 89       	ldd	r22, Y+21	; 0x15
    11a4:	7e 89       	ldd	r23, Y+22	; 0x16
    11a6:	8f 89       	ldd	r24, Y+23	; 0x17
    11a8:	98 8d       	ldd	r25, Y+24	; 0x18
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	40 e8       	ldi	r20, 0x80	; 128
    11b0:	5f e3       	ldi	r21, 0x3F	; 63
    11b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11b6:	88 23       	and	r24, r24
    11b8:	2c f4       	brge	.+10     	; 0x11c4 <Void_Clcd_Init+0x25a>
		__ticks = 1;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	9c 8b       	std	Y+20, r25	; 0x14
    11c0:	8b 8b       	std	Y+19, r24	; 0x13
    11c2:	3f c0       	rjmp	.+126    	; 0x1242 <Void_Clcd_Init+0x2d8>
	else if (__tmp > 65535)
    11c4:	6d 89       	ldd	r22, Y+21	; 0x15
    11c6:	7e 89       	ldd	r23, Y+22	; 0x16
    11c8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ca:	98 8d       	ldd	r25, Y+24	; 0x18
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	3f ef       	ldi	r19, 0xFF	; 255
    11d0:	4f e7       	ldi	r20, 0x7F	; 127
    11d2:	57 e4       	ldi	r21, 0x47	; 71
    11d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11d8:	18 16       	cp	r1, r24
    11da:	4c f5       	brge	.+82     	; 0x122e <Void_Clcd_Init+0x2c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11dc:	69 8d       	ldd	r22, Y+25	; 0x19
    11de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11e4:	20 e0       	ldi	r18, 0x00	; 0
    11e6:	30 e0       	ldi	r19, 0x00	; 0
    11e8:	40 e2       	ldi	r20, 0x20	; 32
    11ea:	51 e4       	ldi	r21, 0x41	; 65
    11ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	bc 01       	movw	r22, r24
    11f6:	cd 01       	movw	r24, r26
    11f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	9c 8b       	std	Y+20, r25	; 0x14
    1202:	8b 8b       	std	Y+19, r24	; 0x13
    1204:	0f c0       	rjmp	.+30     	; 0x1224 <Void_Clcd_Init+0x2ba>
    1206:	88 ec       	ldi	r24, 0xC8	; 200
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	9a 8b       	std	Y+18, r25	; 0x12
    120c:	89 8b       	std	Y+17, r24	; 0x11
    120e:	89 89       	ldd	r24, Y+17	; 0x11
    1210:	9a 89       	ldd	r25, Y+18	; 0x12
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	f1 f7       	brne	.-4      	; 0x1212 <Void_Clcd_Init+0x2a8>
    1216:	9a 8b       	std	Y+18, r25	; 0x12
    1218:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    121a:	8b 89       	ldd	r24, Y+19	; 0x13
    121c:	9c 89       	ldd	r25, Y+20	; 0x14
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	9c 8b       	std	Y+20, r25	; 0x14
    1222:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1224:	8b 89       	ldd	r24, Y+19	; 0x13
    1226:	9c 89       	ldd	r25, Y+20	; 0x14
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	69 f7       	brne	.-38     	; 0x1206 <Void_Clcd_Init+0x29c>
    122c:	14 c0       	rjmp	.+40     	; 0x1256 <Void_Clcd_Init+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    122e:	6d 89       	ldd	r22, Y+21	; 0x15
    1230:	7e 89       	ldd	r23, Y+22	; 0x16
    1232:	8f 89       	ldd	r24, Y+23	; 0x17
    1234:	98 8d       	ldd	r25, Y+24	; 0x18
    1236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	9c 8b       	std	Y+20, r25	; 0x14
    1240:	8b 8b       	std	Y+19, r24	; 0x13
    1242:	8b 89       	ldd	r24, Y+19	; 0x13
    1244:	9c 89       	ldd	r25, Y+20	; 0x14
    1246:	98 8b       	std	Y+16, r25	; 0x10
    1248:	8f 87       	std	Y+15, r24	; 0x0f
    124a:	8f 85       	ldd	r24, Y+15	; 0x0f
    124c:	98 89       	ldd	r25, Y+16	; 0x10
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	f1 f7       	brne	.-4      	; 0x124e <Void_Clcd_Init+0x2e4>
    1252:	98 8b       	std	Y+16, r25	; 0x10
    1254:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    Void_SendCommand(0x01);
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	0e 94 ac 09 	call	0x1358	; 0x1358 <Void_SendCommand>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	a0 e2       	ldi	r26, 0x20	; 32
    1262:	b1 e4       	ldi	r27, 0x41	; 65
    1264:	8b 87       	std	Y+11, r24	; 0x0b
    1266:	9c 87       	std	Y+12, r25	; 0x0c
    1268:	ad 87       	std	Y+13, r26	; 0x0d
    126a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    126c:	6b 85       	ldd	r22, Y+11	; 0x0b
    126e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1270:	8d 85       	ldd	r24, Y+13	; 0x0d
    1272:	9e 85       	ldd	r25, Y+14	; 0x0e
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	4a ef       	ldi	r20, 0xFA	; 250
    127a:	54 e4       	ldi	r21, 0x44	; 68
    127c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1280:	dc 01       	movw	r26, r24
    1282:	cb 01       	movw	r24, r22
    1284:	8f 83       	std	Y+7, r24	; 0x07
    1286:	98 87       	std	Y+8, r25	; 0x08
    1288:	a9 87       	std	Y+9, r26	; 0x09
    128a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    128c:	6f 81       	ldd	r22, Y+7	; 0x07
    128e:	78 85       	ldd	r23, Y+8	; 0x08
    1290:	89 85       	ldd	r24, Y+9	; 0x09
    1292:	9a 85       	ldd	r25, Y+10	; 0x0a
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e8       	ldi	r20, 0x80	; 128
    129a:	5f e3       	ldi	r21, 0x3F	; 63
    129c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12a0:	88 23       	and	r24, r24
    12a2:	2c f4       	brge	.+10     	; 0x12ae <Void_Clcd_Init+0x344>
		__ticks = 1;
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	9e 83       	std	Y+6, r25	; 0x06
    12aa:	8d 83       	std	Y+5, r24	; 0x05
    12ac:	3f c0       	rjmp	.+126    	; 0x132c <Void_Clcd_Init+0x3c2>
	else if (__tmp > 65535)
    12ae:	6f 81       	ldd	r22, Y+7	; 0x07
    12b0:	78 85       	ldd	r23, Y+8	; 0x08
    12b2:	89 85       	ldd	r24, Y+9	; 0x09
    12b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	3f ef       	ldi	r19, 0xFF	; 255
    12ba:	4f e7       	ldi	r20, 0x7F	; 127
    12bc:	57 e4       	ldi	r21, 0x47	; 71
    12be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12c2:	18 16       	cp	r1, r24
    12c4:	4c f5       	brge	.+82     	; 0x1318 <Void_Clcd_Init+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    12cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e2       	ldi	r20, 0x20	; 32
    12d4:	51 e4       	ldi	r21, 0x41	; 65
    12d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <Void_Clcd_Init+0x3a4>
    12f0:	88 ec       	ldi	r24, 0xC8	; 200
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9c 83       	std	Y+4, r25	; 0x04
    12f6:	8b 83       	std	Y+3, r24	; 0x03
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <Void_Clcd_Init+0x392>
    1300:	9c 83       	std	Y+4, r25	; 0x04
    1302:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	69 f7       	brne	.-38     	; 0x12f0 <Void_Clcd_Init+0x386>
    1316:	14 c0       	rjmp	.+40     	; 0x1340 <Void_Clcd_Init+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1318:	6f 81       	ldd	r22, Y+7	; 0x07
    131a:	78 85       	ldd	r23, Y+8	; 0x08
    131c:	89 85       	ldd	r24, Y+9	; 0x09
    131e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1324:	dc 01       	movw	r26, r24
    1326:	cb 01       	movw	r24, r22
    1328:	9e 83       	std	Y+6, r25	; 0x06
    132a:	8d 83       	std	Y+5, r24	; 0x05
    132c:	8d 81       	ldd	r24, Y+5	; 0x05
    132e:	9e 81       	ldd	r25, Y+6	; 0x06
    1330:	9a 83       	std	Y+2, r25	; 0x02
    1332:	89 83       	std	Y+1, r24	; 0x01
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	9a 81       	ldd	r25, Y+2	; 0x02
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <Void_Clcd_Init+0x3ce>
    133c:	9a 83       	std	Y+2, r25	; 0x02
    133e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
    Void_SendCommand(0x06);
    1340:	86 e0       	ldi	r24, 0x06	; 6
    1342:	0e 94 ac 09 	call	0x1358	; 0x1358 <Void_SendCommand>


}
    1346:	e8 96       	adiw	r28, 0x38	; 56
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <Void_SendCommand>:

//This Function send commnad to the LCD 
void Void_SendCommand(u8 Command)
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	0f 92       	push	r0
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
    1362:	89 83       	std	Y+1, r24	; 0x01
    /////////////////////////// 8 Bits Mode ///////////////////////////////////
    DIO_enumSetPortValue         	( CLCD_DATA_PORT, Command     	);
    1364:	83 e0       	ldi	r24, 0x03	; 3
    1366:	69 81       	ldd	r22, Y+1	; 0x01
    1368:	0e 94 58 11 	call	0x22b0	; 0x22b0 <DIO_enumSetPortValue>
    DIO_enumSetPinValue				( CLCD_CONTROLE_PORT,CLCD_RS,DIO_PIN_LOW );
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	63 e0       	ldi	r22, 0x03	; 3
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinValue>
    DIO_enumSetPinValue				( CLCD_CONTROLE_PORT,CLCD_RW,DIO_PIN_LOW );
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	64 e0       	ldi	r22, 0x04	; 4
    137a:	40 e0       	ldi	r20, 0x00	; 0
    137c:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinValue>
    CLCD_Void_SendFallingEdge       ( );
    1380:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CLCD_Void_SendFallingEdge>

}
    1384:	0f 90       	pop	r0
    1386:	cf 91       	pop	r28
    1388:	df 91       	pop	r29
    138a:	08 95       	ret

0000138c <Void_SendData>:

//This Function sends data to the LCD 
void Void_SendData(u8 Data)
{
    138c:	df 93       	push	r29
    138e:	cf 93       	push	r28
    1390:	0f 92       	push	r0
    1392:	cd b7       	in	r28, 0x3d	; 61
    1394:	de b7       	in	r29, 0x3e	; 62
    1396:	89 83       	std	Y+1, r24	; 0x01
    /////////////////////// 8 Bits Mode ////////////////
    DIO_enumSetPortValue         	( CLCD_DATA_PORT, Data     	);
    1398:	83 e0       	ldi	r24, 0x03	; 3
    139a:	69 81       	ldd	r22, Y+1	; 0x01
    139c:	0e 94 58 11 	call	0x22b0	; 0x22b0 <DIO_enumSetPortValue>
    DIO_enumSetPinValue				( CLCD_CONTROLE_PORT,CLCD_RS,DIO_PIN_HIGH );
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	63 e0       	ldi	r22, 0x03	; 3
    13a4:	41 e0       	ldi	r20, 0x01	; 1
    13a6:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinValue>
    DIO_enumSetPinValue				( CLCD_CONTROLE_PORT,CLCD_RW,DIO_PIN_LOW );
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	64 e0       	ldi	r22, 0x04	; 4
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinValue>
    CLCD_Void_SendFallingEdge       ( );
    13b4:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <CLCD_Void_SendFallingEdge>

}
    13b8:	0f 90       	pop	r0
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <CLCD_Void_SendFallingEdge>:

//This Function Sends falling Edge to the Enable Pin 
static void CLCD_Void_SendFallingEdge       (void)
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    13c8:	6c 97       	sbiw	r28, 0x1c	; 28
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	f8 94       	cli
    13ce:	de bf       	out	0x3e, r29	; 62
    13d0:	0f be       	out	0x3f, r0	; 63
    13d2:	cd bf       	out	0x3d, r28	; 61
    DIO_enumSetPinValue				( CLCD_CONTROLE_PORT,CLCD_EN,DIO_PIN_HIGH );
    13d4:	82 e0       	ldi	r24, 0x02	; 2
    13d6:	65 e0       	ldi	r22, 0x05	; 5
    13d8:	41 e0       	ldi	r20, 0x01	; 1
    13da:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinValue>
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	a0 e8       	ldi	r26, 0x80	; 128
    13e4:	bf e3       	ldi	r27, 0x3F	; 63
    13e6:	89 8f       	std	Y+25, r24	; 0x19
    13e8:	9a 8f       	std	Y+26, r25	; 0x1a
    13ea:	ab 8f       	std	Y+27, r26	; 0x1b
    13ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13ee:	69 8d       	ldd	r22, Y+25	; 0x19
    13f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	4a ef       	ldi	r20, 0xFA	; 250
    13fc:	54 e4       	ldi	r21, 0x44	; 68
    13fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1402:	dc 01       	movw	r26, r24
    1404:	cb 01       	movw	r24, r22
    1406:	8d 8b       	std	Y+21, r24	; 0x15
    1408:	9e 8b       	std	Y+22, r25	; 0x16
    140a:	af 8b       	std	Y+23, r26	; 0x17
    140c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    140e:	6d 89       	ldd	r22, Y+21	; 0x15
    1410:	7e 89       	ldd	r23, Y+22	; 0x16
    1412:	8f 89       	ldd	r24, Y+23	; 0x17
    1414:	98 8d       	ldd	r25, Y+24	; 0x18
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e8       	ldi	r20, 0x80	; 128
    141c:	5f e3       	ldi	r21, 0x3F	; 63
    141e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1422:	88 23       	and	r24, r24
    1424:	2c f4       	brge	.+10     	; 0x1430 <CLCD_Void_SendFallingEdge+0x70>
		__ticks = 1;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	9c 8b       	std	Y+20, r25	; 0x14
    142c:	8b 8b       	std	Y+19, r24	; 0x13
    142e:	3f c0       	rjmp	.+126    	; 0x14ae <CLCD_Void_SendFallingEdge+0xee>
	else if (__tmp > 65535)
    1430:	6d 89       	ldd	r22, Y+21	; 0x15
    1432:	7e 89       	ldd	r23, Y+22	; 0x16
    1434:	8f 89       	ldd	r24, Y+23	; 0x17
    1436:	98 8d       	ldd	r25, Y+24	; 0x18
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	3f ef       	ldi	r19, 0xFF	; 255
    143c:	4f e7       	ldi	r20, 0x7F	; 127
    143e:	57 e4       	ldi	r21, 0x47	; 71
    1440:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1444:	18 16       	cp	r1, r24
    1446:	4c f5       	brge	.+82     	; 0x149a <CLCD_Void_SendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1448:	69 8d       	ldd	r22, Y+25	; 0x19
    144a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    144c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    144e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1450:	20 e0       	ldi	r18, 0x00	; 0
    1452:	30 e0       	ldi	r19, 0x00	; 0
    1454:	40 e2       	ldi	r20, 0x20	; 32
    1456:	51 e4       	ldi	r21, 0x41	; 65
    1458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    145c:	dc 01       	movw	r26, r24
    145e:	cb 01       	movw	r24, r22
    1460:	bc 01       	movw	r22, r24
    1462:	cd 01       	movw	r24, r26
    1464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	9c 8b       	std	Y+20, r25	; 0x14
    146e:	8b 8b       	std	Y+19, r24	; 0x13
    1470:	0f c0       	rjmp	.+30     	; 0x1490 <CLCD_Void_SendFallingEdge+0xd0>
    1472:	88 ec       	ldi	r24, 0xC8	; 200
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	9a 8b       	std	Y+18, r25	; 0x12
    1478:	89 8b       	std	Y+17, r24	; 0x11
    147a:	89 89       	ldd	r24, Y+17	; 0x11
    147c:	9a 89       	ldd	r25, Y+18	; 0x12
    147e:	01 97       	sbiw	r24, 0x01	; 1
    1480:	f1 f7       	brne	.-4      	; 0x147e <CLCD_Void_SendFallingEdge+0xbe>
    1482:	9a 8b       	std	Y+18, r25	; 0x12
    1484:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1486:	8b 89       	ldd	r24, Y+19	; 0x13
    1488:	9c 89       	ldd	r25, Y+20	; 0x14
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	9c 8b       	std	Y+20, r25	; 0x14
    148e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1490:	8b 89       	ldd	r24, Y+19	; 0x13
    1492:	9c 89       	ldd	r25, Y+20	; 0x14
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	69 f7       	brne	.-38     	; 0x1472 <CLCD_Void_SendFallingEdge+0xb2>
    1498:	14 c0       	rjmp	.+40     	; 0x14c2 <CLCD_Void_SendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    149a:	6d 89       	ldd	r22, Y+21	; 0x15
    149c:	7e 89       	ldd	r23, Y+22	; 0x16
    149e:	8f 89       	ldd	r24, Y+23	; 0x17
    14a0:	98 8d       	ldd	r25, Y+24	; 0x18
    14a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9c 8b       	std	Y+20, r25	; 0x14
    14ac:	8b 8b       	std	Y+19, r24	; 0x13
    14ae:	8b 89       	ldd	r24, Y+19	; 0x13
    14b0:	9c 89       	ldd	r25, Y+20	; 0x14
    14b2:	98 8b       	std	Y+16, r25	; 0x10
    14b4:	8f 87       	std	Y+15, r24	; 0x0f
    14b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14b8:	98 89       	ldd	r25, Y+16	; 0x10
    14ba:	01 97       	sbiw	r24, 0x01	; 1
    14bc:	f1 f7       	brne	.-4      	; 0x14ba <CLCD_Void_SendFallingEdge+0xfa>
    14be:	98 8b       	std	Y+16, r25	; 0x10
    14c0:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    DIO_enumSetPinValue				( CLCD_CONTROLE_PORT,CLCD_EN,DIO_PIN_LOW );
    14c2:	82 e0       	ldi	r24, 0x02	; 2
    14c4:	65 e0       	ldi	r22, 0x05	; 5
    14c6:	40 e0       	ldi	r20, 0x00	; 0
    14c8:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinValue>
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	a0 e8       	ldi	r26, 0x80	; 128
    14d2:	bf e3       	ldi	r27, 0x3F	; 63
    14d4:	8b 87       	std	Y+11, r24	; 0x0b
    14d6:	9c 87       	std	Y+12, r25	; 0x0c
    14d8:	ad 87       	std	Y+13, r26	; 0x0d
    14da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    14de:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e4:	20 e0       	ldi	r18, 0x00	; 0
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	4a ef       	ldi	r20, 0xFA	; 250
    14ea:	54 e4       	ldi	r21, 0x44	; 68
    14ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14f0:	dc 01       	movw	r26, r24
    14f2:	cb 01       	movw	r24, r22
    14f4:	8f 83       	std	Y+7, r24	; 0x07
    14f6:	98 87       	std	Y+8, r25	; 0x08
    14f8:	a9 87       	std	Y+9, r26	; 0x09
    14fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14fc:	6f 81       	ldd	r22, Y+7	; 0x07
    14fe:	78 85       	ldd	r23, Y+8	; 0x08
    1500:	89 85       	ldd	r24, Y+9	; 0x09
    1502:	9a 85       	ldd	r25, Y+10	; 0x0a
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e8       	ldi	r20, 0x80	; 128
    150a:	5f e3       	ldi	r21, 0x3F	; 63
    150c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1510:	88 23       	and	r24, r24
    1512:	2c f4       	brge	.+10     	; 0x151e <CLCD_Void_SendFallingEdge+0x15e>
		__ticks = 1;
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	9e 83       	std	Y+6, r25	; 0x06
    151a:	8d 83       	std	Y+5, r24	; 0x05
    151c:	3f c0       	rjmp	.+126    	; 0x159c <CLCD_Void_SendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    151e:	6f 81       	ldd	r22, Y+7	; 0x07
    1520:	78 85       	ldd	r23, Y+8	; 0x08
    1522:	89 85       	ldd	r24, Y+9	; 0x09
    1524:	9a 85       	ldd	r25, Y+10	; 0x0a
    1526:	20 e0       	ldi	r18, 0x00	; 0
    1528:	3f ef       	ldi	r19, 0xFF	; 255
    152a:	4f e7       	ldi	r20, 0x7F	; 127
    152c:	57 e4       	ldi	r21, 0x47	; 71
    152e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1532:	18 16       	cp	r1, r24
    1534:	4c f5       	brge	.+82     	; 0x1588 <CLCD_Void_SendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1536:	6b 85       	ldd	r22, Y+11	; 0x0b
    1538:	7c 85       	ldd	r23, Y+12	; 0x0c
    153a:	8d 85       	ldd	r24, Y+13	; 0x0d
    153c:	9e 85       	ldd	r25, Y+14	; 0x0e
    153e:	20 e0       	ldi	r18, 0x00	; 0
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	40 e2       	ldi	r20, 0x20	; 32
    1544:	51 e4       	ldi	r21, 0x41	; 65
    1546:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154a:	dc 01       	movw	r26, r24
    154c:	cb 01       	movw	r24, r22
    154e:	bc 01       	movw	r22, r24
    1550:	cd 01       	movw	r24, r26
    1552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	9e 83       	std	Y+6, r25	; 0x06
    155c:	8d 83       	std	Y+5, r24	; 0x05
    155e:	0f c0       	rjmp	.+30     	; 0x157e <CLCD_Void_SendFallingEdge+0x1be>
    1560:	88 ec       	ldi	r24, 0xC8	; 200
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	9c 83       	std	Y+4, r25	; 0x04
    1566:	8b 83       	std	Y+3, r24	; 0x03
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	f1 f7       	brne	.-4      	; 0x156c <CLCD_Void_SendFallingEdge+0x1ac>
    1570:	9c 83       	std	Y+4, r25	; 0x04
    1572:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1574:	8d 81       	ldd	r24, Y+5	; 0x05
    1576:	9e 81       	ldd	r25, Y+6	; 0x06
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	9e 83       	std	Y+6, r25	; 0x06
    157c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    157e:	8d 81       	ldd	r24, Y+5	; 0x05
    1580:	9e 81       	ldd	r25, Y+6	; 0x06
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	69 f7       	brne	.-38     	; 0x1560 <CLCD_Void_SendFallingEdge+0x1a0>
    1586:	14 c0       	rjmp	.+40     	; 0x15b0 <CLCD_Void_SendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1588:	6f 81       	ldd	r22, Y+7	; 0x07
    158a:	78 85       	ldd	r23, Y+8	; 0x08
    158c:	89 85       	ldd	r24, Y+9	; 0x09
    158e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1594:	dc 01       	movw	r26, r24
    1596:	cb 01       	movw	r24, r22
    1598:	9e 83       	std	Y+6, r25	; 0x06
    159a:	8d 83       	std	Y+5, r24	; 0x05
    159c:	8d 81       	ldd	r24, Y+5	; 0x05
    159e:	9e 81       	ldd	r25, Y+6	; 0x06
    15a0:	9a 83       	std	Y+2, r25	; 0x02
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	9a 81       	ldd	r25, Y+2	; 0x02
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <CLCD_Void_SendFallingEdge+0x1e8>
    15ac:	9a 83       	std	Y+2, r25	; 0x02
    15ae:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);

}
    15b0:	6c 96       	adiw	r28, 0x1c	; 28
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <Void_ClearScreen>:

//This Function Clear The Screen of the LCD
void Void_ClearScreen               (void)
{
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	2e 97       	sbiw	r28, 0x0e	; 14
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
     Void_SendCommand(0X01);
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	0e 94 ac 09 	call	0x1358	; 0x1358 <Void_SendCommand>
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	a0 e2       	ldi	r26, 0x20	; 32
    15e2:	b1 e4       	ldi	r27, 0x41	; 65
    15e4:	8b 87       	std	Y+11, r24	; 0x0b
    15e6:	9c 87       	std	Y+12, r25	; 0x0c
    15e8:	ad 87       	std	Y+13, r26	; 0x0d
    15ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	4a ef       	ldi	r20, 0xFA	; 250
    15fa:	54 e4       	ldi	r21, 0x44	; 68
    15fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	8f 83       	std	Y+7, r24	; 0x07
    1606:	98 87       	std	Y+8, r25	; 0x08
    1608:	a9 87       	std	Y+9, r26	; 0x09
    160a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    160c:	6f 81       	ldd	r22, Y+7	; 0x07
    160e:	78 85       	ldd	r23, Y+8	; 0x08
    1610:	89 85       	ldd	r24, Y+9	; 0x09
    1612:	9a 85       	ldd	r25, Y+10	; 0x0a
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 e8       	ldi	r20, 0x80	; 128
    161a:	5f e3       	ldi	r21, 0x3F	; 63
    161c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1620:	88 23       	and	r24, r24
    1622:	2c f4       	brge	.+10     	; 0x162e <Void_ClearScreen+0x6c>
		__ticks = 1;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	9e 83       	std	Y+6, r25	; 0x06
    162a:	8d 83       	std	Y+5, r24	; 0x05
    162c:	3f c0       	rjmp	.+126    	; 0x16ac <Void_ClearScreen+0xea>
	else if (__tmp > 65535)
    162e:	6f 81       	ldd	r22, Y+7	; 0x07
    1630:	78 85       	ldd	r23, Y+8	; 0x08
    1632:	89 85       	ldd	r24, Y+9	; 0x09
    1634:	9a 85       	ldd	r25, Y+10	; 0x0a
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	3f ef       	ldi	r19, 0xFF	; 255
    163a:	4f e7       	ldi	r20, 0x7F	; 127
    163c:	57 e4       	ldi	r21, 0x47	; 71
    163e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1642:	18 16       	cp	r1, r24
    1644:	4c f5       	brge	.+82     	; 0x1698 <Void_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1646:	6b 85       	ldd	r22, Y+11	; 0x0b
    1648:	7c 85       	ldd	r23, Y+12	; 0x0c
    164a:	8d 85       	ldd	r24, Y+13	; 0x0d
    164c:	9e 85       	ldd	r25, Y+14	; 0x0e
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e2       	ldi	r20, 0x20	; 32
    1654:	51 e4       	ldi	r21, 0x41	; 65
    1656:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165a:	dc 01       	movw	r26, r24
    165c:	cb 01       	movw	r24, r22
    165e:	bc 01       	movw	r22, r24
    1660:	cd 01       	movw	r24, r26
    1662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1666:	dc 01       	movw	r26, r24
    1668:	cb 01       	movw	r24, r22
    166a:	9e 83       	std	Y+6, r25	; 0x06
    166c:	8d 83       	std	Y+5, r24	; 0x05
    166e:	0f c0       	rjmp	.+30     	; 0x168e <Void_ClearScreen+0xcc>
    1670:	88 ec       	ldi	r24, 0xC8	; 200
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	9c 83       	std	Y+4, r25	; 0x04
    1676:	8b 83       	std	Y+3, r24	; 0x03
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	9c 81       	ldd	r25, Y+4	; 0x04
    167c:	01 97       	sbiw	r24, 0x01	; 1
    167e:	f1 f7       	brne	.-4      	; 0x167c <Void_ClearScreen+0xba>
    1680:	9c 83       	std	Y+4, r25	; 0x04
    1682:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1684:	8d 81       	ldd	r24, Y+5	; 0x05
    1686:	9e 81       	ldd	r25, Y+6	; 0x06
    1688:	01 97       	sbiw	r24, 0x01	; 1
    168a:	9e 83       	std	Y+6, r25	; 0x06
    168c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    168e:	8d 81       	ldd	r24, Y+5	; 0x05
    1690:	9e 81       	ldd	r25, Y+6	; 0x06
    1692:	00 97       	sbiw	r24, 0x00	; 0
    1694:	69 f7       	brne	.-38     	; 0x1670 <Void_ClearScreen+0xae>
    1696:	14 c0       	rjmp	.+40     	; 0x16c0 <Void_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1698:	6f 81       	ldd	r22, Y+7	; 0x07
    169a:	78 85       	ldd	r23, Y+8	; 0x08
    169c:	89 85       	ldd	r24, Y+9	; 0x09
    169e:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	9e 83       	std	Y+6, r25	; 0x06
    16aa:	8d 83       	std	Y+5, r24	; 0x05
    16ac:	8d 81       	ldd	r24, Y+5	; 0x05
    16ae:	9e 81       	ldd	r25, Y+6	; 0x06
    16b0:	9a 83       	std	Y+2, r25	; 0x02
    16b2:	89 83       	std	Y+1, r24	; 0x01
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
    16b6:	9a 81       	ldd	r25, Y+2	; 0x02
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	f1 f7       	brne	.-4      	; 0x16b8 <Void_ClearScreen+0xf6>
    16bc:	9a 83       	std	Y+2, r25	; 0x02
    16be:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);
}
    16c0:	2e 96       	adiw	r28, 0x0e	; 14
    16c2:	0f b6       	in	r0, 0x3f	; 63
    16c4:	f8 94       	cli
    16c6:	de bf       	out	0x3e, r29	; 62
    16c8:	0f be       	out	0x3f, r0	; 63
    16ca:	cd bf       	out	0x3d, r28	; 61
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <Void_SendString>:

//This Function Sends String to the LCD 
void Void_SendString( const u8 *String)
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	00 d0       	rcall	.+0      	; 0x16d8 <Void_SendString+0x6>
    16d8:	00 d0       	rcall	.+0      	; 0x16da <Void_SendString+0x8>
    16da:	cd b7       	in	r28, 0x3d	; 61
    16dc:	de b7       	in	r29, 0x3e	; 62
    16de:	9c 83       	std	Y+4, r25	; 0x04
    16e0:	8b 83       	std	Y+3, r24	; 0x03
    u16 Iterator = 0 ;
    16e2:	1a 82       	std	Y+2, r1	; 0x02
    16e4:	19 82       	std	Y+1, r1	; 0x01
    16e6:	0f c0       	rjmp	.+30     	; 0x1706 <Void_SendString+0x34>
    while (String[Iterator] !='\0')
    {
        Void_SendData(String[Iterator]);
    16e8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ea:	3c 81       	ldd	r19, Y+4	; 0x04
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	9a 81       	ldd	r25, Y+2	; 0x02
    16f0:	f9 01       	movw	r30, r18
    16f2:	e8 0f       	add	r30, r24
    16f4:	f9 1f       	adc	r31, r25
    16f6:	80 81       	ld	r24, Z
    16f8:	0e 94 c6 09 	call	0x138c	; 0x138c <Void_SendData>
        Iterator ++;
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1700:	01 96       	adiw	r24, 0x01	; 1
    1702:	9a 83       	std	Y+2, r25	; 0x02
    1704:	89 83       	std	Y+1, r24	; 0x01

//This Function Sends String to the LCD 
void Void_SendString( const u8 *String)
{
    u16 Iterator = 0 ;
    while (String[Iterator] !='\0')
    1706:	2b 81       	ldd	r18, Y+3	; 0x03
    1708:	3c 81       	ldd	r19, Y+4	; 0x04
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	9a 81       	ldd	r25, Y+2	; 0x02
    170e:	f9 01       	movw	r30, r18
    1710:	e8 0f       	add	r30, r24
    1712:	f9 1f       	adc	r31, r25
    1714:	80 81       	ld	r24, Z
    1716:	88 23       	and	r24, r24
    1718:	39 f7       	brne	.-50     	; 0x16e8 <Void_SendString+0x16>
    {
        Void_SendData(String[Iterator]);
        Iterator ++;
    }
}
    171a:	0f 90       	pop	r0
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	0f 90       	pop	r0
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <Void_SetPosition>:

//This Function Set the position of the Cursor 
void Void_SetPosition               (u8 ROW, u8 COL)
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	61 97       	sbiw	r28, 0x11	; 17
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	88 8b       	std	Y+16, r24	; 0x10
    173e:	69 8b       	std	Y+17, r22	; 0x11
    u8 position ;
    if (ROW != CLCD_ROW_1 || ROW != CLCD_ROW_2 || COL > CLCD_COL_16 || COL < CLCD_COL_1 )
    1740:	88 89       	ldd	r24, Y+16	; 0x10
    1742:	88 23       	and	r24, r24
    1744:	31 f4       	brne	.+12     	; 0x1752 <Void_SetPosition+0x2a>
    1746:	88 89       	ldd	r24, Y+16	; 0x10
    1748:	81 30       	cpi	r24, 0x01	; 1
    174a:	19 f4       	brne	.+6      	; 0x1752 <Void_SetPosition+0x2a>
    174c:	89 89       	ldd	r24, Y+17	; 0x11
    174e:	80 31       	cpi	r24, 0x10	; 16
    1750:	18 f0       	brcs	.+6      	; 0x1758 <Void_SetPosition+0x30>
    {
        position = CLCD_SET_CURSOR;
    1752:	80 e8       	ldi	r24, 0x80	; 128
    1754:	8f 87       	std	Y+15, r24	; 0x0f
    1756:	0d c0       	rjmp	.+26     	; 0x1772 <Void_SetPosition+0x4a>
    }
    else if (ROW == CLCD_ROW_1)
    1758:	88 89       	ldd	r24, Y+16	; 0x10
    175a:	88 23       	and	r24, r24
    175c:	21 f4       	brne	.+8      	; 0x1766 <Void_SetPosition+0x3e>
    {
        position = CLCD_SET_CURSOR + COL;
    175e:	89 89       	ldd	r24, Y+17	; 0x11
    1760:	80 58       	subi	r24, 0x80	; 128
    1762:	8f 87       	std	Y+15, r24	; 0x0f
    1764:	06 c0       	rjmp	.+12     	; 0x1772 <Void_SetPosition+0x4a>
    }
    else if (ROW == CLCD_ROW_2)
    1766:	88 89       	ldd	r24, Y+16	; 0x10
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	19 f4       	brne	.+6      	; 0x1772 <Void_SetPosition+0x4a>
    {
        position = (CLCD_SET_CURSOR + 64) + COL;
    176c:	89 89       	ldd	r24, Y+17	; 0x11
    176e:	80 54       	subi	r24, 0x40	; 64
    1770:	8f 87       	std	Y+15, r24	; 0x0f
    }
    Void_SendCommand(position);
    1772:	8f 85       	ldd	r24, Y+15	; 0x0f
    1774:	0e 94 ac 09 	call	0x1358	; 0x1358 <Void_SendCommand>
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	a0 e8       	ldi	r26, 0x80	; 128
    177e:	bf e3       	ldi	r27, 0x3F	; 63
    1780:	8b 87       	std	Y+11, r24	; 0x0b
    1782:	9c 87       	std	Y+12, r25	; 0x0c
    1784:	ad 87       	std	Y+13, r26	; 0x0d
    1786:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1788:	6b 85       	ldd	r22, Y+11	; 0x0b
    178a:	7c 85       	ldd	r23, Y+12	; 0x0c
    178c:	8d 85       	ldd	r24, Y+13	; 0x0d
    178e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	4a ef       	ldi	r20, 0xFA	; 250
    1796:	54 e4       	ldi	r21, 0x44	; 68
    1798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	8f 83       	std	Y+7, r24	; 0x07
    17a2:	98 87       	std	Y+8, r25	; 0x08
    17a4:	a9 87       	std	Y+9, r26	; 0x09
    17a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17a8:	6f 81       	ldd	r22, Y+7	; 0x07
    17aa:	78 85       	ldd	r23, Y+8	; 0x08
    17ac:	89 85       	ldd	r24, Y+9	; 0x09
    17ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e8       	ldi	r20, 0x80	; 128
    17b6:	5f e3       	ldi	r21, 0x3F	; 63
    17b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17bc:	88 23       	and	r24, r24
    17be:	2c f4       	brge	.+10     	; 0x17ca <Void_SetPosition+0xa2>
		__ticks = 1;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9e 83       	std	Y+6, r25	; 0x06
    17c6:	8d 83       	std	Y+5, r24	; 0x05
    17c8:	3f c0       	rjmp	.+126    	; 0x1848 <Void_SetPosition+0x120>
	else if (__tmp > 65535)
    17ca:	6f 81       	ldd	r22, Y+7	; 0x07
    17cc:	78 85       	ldd	r23, Y+8	; 0x08
    17ce:	89 85       	ldd	r24, Y+9	; 0x09
    17d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	3f ef       	ldi	r19, 0xFF	; 255
    17d6:	4f e7       	ldi	r20, 0x7F	; 127
    17d8:	57 e4       	ldi	r21, 0x47	; 71
    17da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17de:	18 16       	cp	r1, r24
    17e0:	4c f5       	brge	.+82     	; 0x1834 <Void_SetPosition+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	40 e2       	ldi	r20, 0x20	; 32
    17f0:	51 e4       	ldi	r21, 0x41	; 65
    17f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	bc 01       	movw	r22, r24
    17fc:	cd 01       	movw	r24, r26
    17fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
    180a:	0f c0       	rjmp	.+30     	; 0x182a <Void_SetPosition+0x102>
    180c:	88 ec       	ldi	r24, 0xC8	; 200
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9c 83       	std	Y+4, r25	; 0x04
    1812:	8b 83       	std	Y+3, r24	; 0x03
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <Void_SetPosition+0xf0>
    181c:	9c 83       	std	Y+4, r25	; 0x04
    181e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	9e 81       	ldd	r25, Y+6	; 0x06
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182a:	8d 81       	ldd	r24, Y+5	; 0x05
    182c:	9e 81       	ldd	r25, Y+6	; 0x06
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	69 f7       	brne	.-38     	; 0x180c <Void_SetPosition+0xe4>
    1832:	14 c0       	rjmp	.+40     	; 0x185c <Void_SetPosition+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1834:	6f 81       	ldd	r22, Y+7	; 0x07
    1836:	78 85       	ldd	r23, Y+8	; 0x08
    1838:	89 85       	ldd	r24, Y+9	; 0x09
    183a:	9a 85       	ldd	r25, Y+10	; 0x0a
    183c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	9e 83       	std	Y+6, r25	; 0x06
    1846:	8d 83       	std	Y+5, r24	; 0x05
    1848:	8d 81       	ldd	r24, Y+5	; 0x05
    184a:	9e 81       	ldd	r25, Y+6	; 0x06
    184c:	9a 83       	std	Y+2, r25	; 0x02
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	9a 81       	ldd	r25, Y+2	; 0x02
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <Void_SetPosition+0x12c>
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1);
}
    185c:	61 96       	adiw	r28, 0x11	; 17
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <DIO_enumSetPinDirection>:
#include "DIO_private.h"


/*This Function set the direction of the pin either the direction is input or output */
DIO_ErrorStatus DIO_enumSetPinDirection 		(u8 PORT,u8 PIN,u8 Direction)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
    1876:	28 97       	sbiw	r28, 0x08	; 8
    1878:	0f b6       	in	r0, 0x3f	; 63
    187a:	f8 94       	cli
    187c:	de bf       	out	0x3e, r29	; 62
    187e:	0f be       	out	0x3f, r0	; 63
    1880:	cd bf       	out	0x3d, r28	; 61
    1882:	8a 83       	std	Y+2, r24	; 0x02
    1884:	6b 83       	std	Y+3, r22	; 0x03
    1886:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    1888:	81 e0       	ldi	r24, 0x01	; 1
    188a:	89 83       	std	Y+1, r24	; 0x01

	if((PORT <= DIO_PORTD) &&( PIN <= DIO_PIN7))
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	84 30       	cpi	r24, 0x04	; 4
    1890:	08 f0       	brcs	.+2      	; 0x1894 <DIO_enumSetPinDirection+0x26>
    1892:	f1 c0       	rjmp	.+482    	; 0x1a76 <DIO_enumSetPinDirection+0x208>
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	88 30       	cpi	r24, 0x08	; 8
    1898:	08 f0       	brcs	.+2      	; 0x189c <DIO_enumSetPinDirection+0x2e>
    189a:	ed c0       	rjmp	.+474    	; 0x1a76 <DIO_enumSetPinDirection+0x208>
	{
		if( Direction == DIO_PIN_OUTPUT)
    189c:	8c 81       	ldd	r24, Y+4	; 0x04
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	09 f0       	breq	.+2      	; 0x18a4 <DIO_enumSetPinDirection+0x36>
    18a2:	6f c0       	rjmp	.+222    	; 0x1982 <DIO_enumSetPinDirection+0x114>
		{
			switch(PORT)
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	38 87       	std	Y+8, r19	; 0x08
    18ac:	2f 83       	std	Y+7, r18	; 0x07
    18ae:	8f 81       	ldd	r24, Y+7	; 0x07
    18b0:	98 85       	ldd	r25, Y+8	; 0x08
    18b2:	81 30       	cpi	r24, 0x01	; 1
    18b4:	91 05       	cpc	r25, r1
    18b6:	49 f1       	breq	.+82     	; 0x190a <DIO_enumSetPinDirection+0x9c>
    18b8:	2f 81       	ldd	r18, Y+7	; 0x07
    18ba:	38 85       	ldd	r19, Y+8	; 0x08
    18bc:	22 30       	cpi	r18, 0x02	; 2
    18be:	31 05       	cpc	r19, r1
    18c0:	2c f4       	brge	.+10     	; 0x18cc <DIO_enumSetPinDirection+0x5e>
    18c2:	8f 81       	ldd	r24, Y+7	; 0x07
    18c4:	98 85       	ldd	r25, Y+8	; 0x08
    18c6:	00 97       	sbiw	r24, 0x00	; 0
    18c8:	61 f0       	breq	.+24     	; 0x18e2 <DIO_enumSetPinDirection+0x74>
    18ca:	d6 c0       	rjmp	.+428    	; 0x1a78 <DIO_enumSetPinDirection+0x20a>
    18cc:	2f 81       	ldd	r18, Y+7	; 0x07
    18ce:	38 85       	ldd	r19, Y+8	; 0x08
    18d0:	22 30       	cpi	r18, 0x02	; 2
    18d2:	31 05       	cpc	r19, r1
    18d4:	71 f1       	breq	.+92     	; 0x1932 <DIO_enumSetPinDirection+0xc4>
    18d6:	8f 81       	ldd	r24, Y+7	; 0x07
    18d8:	98 85       	ldd	r25, Y+8	; 0x08
    18da:	83 30       	cpi	r24, 0x03	; 3
    18dc:	91 05       	cpc	r25, r1
    18de:	e9 f1       	breq	.+122    	; 0x195a <DIO_enumSetPinDirection+0xec>
    18e0:	cb c0       	rjmp	.+406    	; 0x1a78 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA : SetBit(DDRA_Register,PIN);break;
    18e2:	aa e3       	ldi	r26, 0x3A	; 58
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	ea e3       	ldi	r30, 0x3A	; 58
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	48 2f       	mov	r20, r24
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 2e       	mov	r0, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <DIO_enumSetPinDirection+0x92>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	0a 94       	dec	r0
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <DIO_enumSetPinDirection+0x8e>
    1904:	84 2b       	or	r24, r20
    1906:	8c 93       	st	X, r24
    1908:	b7 c0       	rjmp	.+366    	; 0x1a78 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB : SetBit(DDRB_Register,PIN);break;
    190a:	a7 e3       	ldi	r26, 0x37	; 55
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e7 e3       	ldi	r30, 0x37	; 55
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 2e       	mov	r0, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <DIO_enumSetPinDirection+0xba>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	0a 94       	dec	r0
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <DIO_enumSetPinDirection+0xb6>
    192c:	84 2b       	or	r24, r20
    192e:	8c 93       	st	X, r24
    1930:	a3 c0       	rjmp	.+326    	; 0x1a78 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC : SetBit(DDRC_Register,PIN);break;
    1932:	a4 e3       	ldi	r26, 0x34	; 52
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e4 e3       	ldi	r30, 0x34	; 52
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	48 2f       	mov	r20, r24
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 2e       	mov	r0, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <DIO_enumSetPinDirection+0xe2>
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	0a 94       	dec	r0
    1952:	e2 f7       	brpl	.-8      	; 0x194c <DIO_enumSetPinDirection+0xde>
    1954:	84 2b       	or	r24, r20
    1956:	8c 93       	st	X, r24
    1958:	8f c0       	rjmp	.+286    	; 0x1a78 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD : SetBit(DDRD_Register,PIN);break;
    195a:	a1 e3       	ldi	r26, 0x31	; 49
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e1 e3       	ldi	r30, 0x31	; 49
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <DIO_enumSetPinDirection+0x10a>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <DIO_enumSetPinDirection+0x106>
    197c:	84 2b       	or	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	7b c0       	rjmp	.+246    	; 0x1a78 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if(Direction == DIO_PIN_INPUT)
    1982:	8c 81       	ldd	r24, Y+4	; 0x04
    1984:	88 23       	and	r24, r24
    1986:	09 f0       	breq	.+2      	; 0x198a <DIO_enumSetPinDirection+0x11c>
    1988:	74 c0       	rjmp	.+232    	; 0x1a72 <DIO_enumSetPinDirection+0x204>
		{
			switch(PORT)
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	28 2f       	mov	r18, r24
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	3e 83       	std	Y+6, r19	; 0x06
    1992:	2d 83       	std	Y+5, r18	; 0x05
    1994:	8d 81       	ldd	r24, Y+5	; 0x05
    1996:	9e 81       	ldd	r25, Y+6	; 0x06
    1998:	81 30       	cpi	r24, 0x01	; 1
    199a:	91 05       	cpc	r25, r1
    199c:	59 f1       	breq	.+86     	; 0x19f4 <DIO_enumSetPinDirection+0x186>
    199e:	2d 81       	ldd	r18, Y+5	; 0x05
    19a0:	3e 81       	ldd	r19, Y+6	; 0x06
    19a2:	22 30       	cpi	r18, 0x02	; 2
    19a4:	31 05       	cpc	r19, r1
    19a6:	2c f4       	brge	.+10     	; 0x19b2 <DIO_enumSetPinDirection+0x144>
    19a8:	8d 81       	ldd	r24, Y+5	; 0x05
    19aa:	9e 81       	ldd	r25, Y+6	; 0x06
    19ac:	00 97       	sbiw	r24, 0x00	; 0
    19ae:	69 f0       	breq	.+26     	; 0x19ca <DIO_enumSetPinDirection+0x15c>
    19b0:	63 c0       	rjmp	.+198    	; 0x1a78 <DIO_enumSetPinDirection+0x20a>
    19b2:	2d 81       	ldd	r18, Y+5	; 0x05
    19b4:	3e 81       	ldd	r19, Y+6	; 0x06
    19b6:	22 30       	cpi	r18, 0x02	; 2
    19b8:	31 05       	cpc	r19, r1
    19ba:	89 f1       	breq	.+98     	; 0x1a1e <DIO_enumSetPinDirection+0x1b0>
    19bc:	8d 81       	ldd	r24, Y+5	; 0x05
    19be:	9e 81       	ldd	r25, Y+6	; 0x06
    19c0:	83 30       	cpi	r24, 0x03	; 3
    19c2:	91 05       	cpc	r25, r1
    19c4:	09 f4       	brne	.+2      	; 0x19c8 <DIO_enumSetPinDirection+0x15a>
    19c6:	40 c0       	rjmp	.+128    	; 0x1a48 <DIO_enumSetPinDirection+0x1da>
    19c8:	57 c0       	rjmp	.+174    	; 0x1a78 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA : ClrBit(DDRA_Register,PIN);break;
    19ca:	aa e3       	ldi	r26, 0x3A	; 58
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	ea e3       	ldi	r30, 0x3A	; 58
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	48 2f       	mov	r20, r24
    19d6:	8b 81       	ldd	r24, Y+3	; 0x03
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	02 2e       	mov	r0, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <DIO_enumSetPinDirection+0x17a>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	0a 94       	dec	r0
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <DIO_enumSetPinDirection+0x176>
    19ec:	80 95       	com	r24
    19ee:	84 23       	and	r24, r20
    19f0:	8c 93       	st	X, r24
    19f2:	42 c0       	rjmp	.+132    	; 0x1a78 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB : ClrBit(DDRB_Register,PIN);break;
    19f4:	a7 e3       	ldi	r26, 0x37	; 55
    19f6:	b0 e0       	ldi	r27, 0x00	; 0
    19f8:	e7 e3       	ldi	r30, 0x37	; 55
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	48 2f       	mov	r20, r24
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	81 e0       	ldi	r24, 0x01	; 1
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	02 2e       	mov	r0, r18
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <DIO_enumSetPinDirection+0x1a4>
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	0a 94       	dec	r0
    1a14:	e2 f7       	brpl	.-8      	; 0x1a0e <DIO_enumSetPinDirection+0x1a0>
    1a16:	80 95       	com	r24
    1a18:	84 23       	and	r24, r20
    1a1a:	8c 93       	st	X, r24
    1a1c:	2d c0       	rjmp	.+90     	; 0x1a78 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC : ClrBit(DDRC_Register,PIN);break;
    1a1e:	a4 e3       	ldi	r26, 0x34	; 52
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e4 e3       	ldi	r30, 0x34	; 52
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	48 2f       	mov	r20, r24
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	02 2e       	mov	r0, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <DIO_enumSetPinDirection+0x1ce>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	0a 94       	dec	r0
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <DIO_enumSetPinDirection+0x1ca>
    1a40:	80 95       	com	r24
    1a42:	84 23       	and	r24, r20
    1a44:	8c 93       	st	X, r24
    1a46:	18 c0       	rjmp	.+48     	; 0x1a78 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD : ClrBit(DDRD_Register,PIN);break;
    1a48:	a1 e3       	ldi	r26, 0x31	; 49
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e1 e3       	ldi	r30, 0x31	; 49
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	48 2f       	mov	r20, r24
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	02 2e       	mov	r0, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <DIO_enumSetPinDirection+0x1f8>
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	0a 94       	dec	r0
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <DIO_enumSetPinDirection+0x1f4>
    1a6a:	80 95       	com	r24
    1a6c:	84 23       	and	r24, r20
    1a6e:	8c 93       	st	X, r24
    1a70:	03 c0       	rjmp	.+6      	; 0x1a78 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else
			LOC_enumState = DIO_NOK;
    1a72:	19 82       	std	Y+1, r1	; 0x01
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <DIO_enumSetPinDirection+0x20a>
	}
	else
		LOC_enumState = DIO_NOK;
    1a76:	19 82       	std	Y+1, r1	; 0x01

	return LOC_enumState;
    1a78:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a7a:	28 96       	adiw	r28, 0x08	; 8
    1a7c:	0f b6       	in	r0, 0x3f	; 63
    1a7e:	f8 94       	cli
    1a80:	de bf       	out	0x3e, r29	; 62
    1a82:	0f be       	out	0x3f, r0	; 63
    1a84:	cd bf       	out	0x3d, r28	; 61
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <DIO_enumSetPinValue>:

/*This function set the value of the pin if it is output pin either HIGH  or LOW */
DIO_ErrorStatus DIO_enumSetPinValue				(u8  PORT,u8  PIN,u8  Value)
{
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	cd b7       	in	r28, 0x3d	; 61
    1a92:	de b7       	in	r29, 0x3e	; 62
    1a94:	28 97       	sbiw	r28, 0x08	; 8
    1a96:	0f b6       	in	r0, 0x3f	; 63
    1a98:	f8 94       	cli
    1a9a:	de bf       	out	0x3e, r29	; 62
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	cd bf       	out	0x3d, r28	; 61
    1aa0:	8a 83       	std	Y+2, r24	; 0x02
    1aa2:	6b 83       	std	Y+3, r22	; 0x03
    1aa4:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	89 83       	std	Y+1, r24	; 0x01
	if((PORT <= DIO_PORTD) && PIN <= DIO_PIN7)
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	84 30       	cpi	r24, 0x04	; 4
    1aae:	08 f0       	brcs	.+2      	; 0x1ab2 <DIO_enumSetPinValue+0x26>
    1ab0:	f1 c0       	rjmp	.+482    	; 0x1c94 <DIO_enumSetPinValue+0x208>
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	88 30       	cpi	r24, 0x08	; 8
    1ab6:	08 f0       	brcs	.+2      	; 0x1aba <DIO_enumSetPinValue+0x2e>
    1ab8:	ed c0       	rjmp	.+474    	; 0x1c94 <DIO_enumSetPinValue+0x208>
	{
		if(Value == DIO_PIN_HIGH)
    1aba:	8c 81       	ldd	r24, Y+4	; 0x04
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	09 f0       	breq	.+2      	; 0x1ac2 <DIO_enumSetPinValue+0x36>
    1ac0:	6f c0       	rjmp	.+222    	; 0x1ba0 <DIO_enumSetPinValue+0x114>
		{
			switch(PORT)
    1ac2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	38 87       	std	Y+8, r19	; 0x08
    1aca:	2f 83       	std	Y+7, r18	; 0x07
    1acc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ace:	98 85       	ldd	r25, Y+8	; 0x08
    1ad0:	81 30       	cpi	r24, 0x01	; 1
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	49 f1       	breq	.+82     	; 0x1b28 <DIO_enumSetPinValue+0x9c>
    1ad6:	2f 81       	ldd	r18, Y+7	; 0x07
    1ad8:	38 85       	ldd	r19, Y+8	; 0x08
    1ada:	22 30       	cpi	r18, 0x02	; 2
    1adc:	31 05       	cpc	r19, r1
    1ade:	2c f4       	brge	.+10     	; 0x1aea <DIO_enumSetPinValue+0x5e>
    1ae0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae2:	98 85       	ldd	r25, Y+8	; 0x08
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	61 f0       	breq	.+24     	; 0x1b00 <DIO_enumSetPinValue+0x74>
    1ae8:	d6 c0       	rjmp	.+428    	; 0x1c96 <DIO_enumSetPinValue+0x20a>
    1aea:	2f 81       	ldd	r18, Y+7	; 0x07
    1aec:	38 85       	ldd	r19, Y+8	; 0x08
    1aee:	22 30       	cpi	r18, 0x02	; 2
    1af0:	31 05       	cpc	r19, r1
    1af2:	71 f1       	breq	.+92     	; 0x1b50 <DIO_enumSetPinValue+0xc4>
    1af4:	8f 81       	ldd	r24, Y+7	; 0x07
    1af6:	98 85       	ldd	r25, Y+8	; 0x08
    1af8:	83 30       	cpi	r24, 0x03	; 3
    1afa:	91 05       	cpc	r25, r1
    1afc:	e9 f1       	breq	.+122    	; 0x1b78 <DIO_enumSetPinValue+0xec>
    1afe:	cb c0       	rjmp	.+406    	; 0x1c96 <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA : SetBit(PORTA_Register,PIN);break;
    1b00:	ab e3       	ldi	r26, 0x3B	; 59
    1b02:	b0 e0       	ldi	r27, 0x00	; 0
    1b04:	eb e3       	ldi	r30, 0x3B	; 59
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	80 81       	ld	r24, Z
    1b0a:	48 2f       	mov	r20, r24
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	28 2f       	mov	r18, r24
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	02 2e       	mov	r0, r18
    1b18:	02 c0       	rjmp	.+4      	; 0x1b1e <DIO_enumSetPinValue+0x92>
    1b1a:	88 0f       	add	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	0a 94       	dec	r0
    1b20:	e2 f7       	brpl	.-8      	; 0x1b1a <DIO_enumSetPinValue+0x8e>
    1b22:	84 2b       	or	r24, r20
    1b24:	8c 93       	st	X, r24
    1b26:	b7 c0       	rjmp	.+366    	; 0x1c96 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB : SetBit(PORTB_Register,PIN);break;
    1b28:	a8 e3       	ldi	r26, 0x38	; 56
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e8 e3       	ldi	r30, 0x38	; 56
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	48 2f       	mov	r20, r24
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	02 2e       	mov	r0, r18
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <DIO_enumSetPinValue+0xba>
    1b42:	88 0f       	add	r24, r24
    1b44:	99 1f       	adc	r25, r25
    1b46:	0a 94       	dec	r0
    1b48:	e2 f7       	brpl	.-8      	; 0x1b42 <DIO_enumSetPinValue+0xb6>
    1b4a:	84 2b       	or	r24, r20
    1b4c:	8c 93       	st	X, r24
    1b4e:	a3 c0       	rjmp	.+326    	; 0x1c96 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC : SetBit(PORTC_Register,PIN);break;
    1b50:	a5 e3       	ldi	r26, 0x35	; 53
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e5 e3       	ldi	r30, 0x35	; 53
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	48 2f       	mov	r20, r24
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	02 2e       	mov	r0, r18
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <DIO_enumSetPinValue+0xe2>
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	0a 94       	dec	r0
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <DIO_enumSetPinValue+0xde>
    1b72:	84 2b       	or	r24, r20
    1b74:	8c 93       	st	X, r24
    1b76:	8f c0       	rjmp	.+286    	; 0x1c96 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD : SetBit(PORTD_Register,PIN);break;
    1b78:	a2 e3       	ldi	r26, 0x32	; 50
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e2 e3       	ldi	r30, 0x32	; 50
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	02 2e       	mov	r0, r18
    1b90:	02 c0       	rjmp	.+4      	; 0x1b96 <DIO_enumSetPinValue+0x10a>
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	0a 94       	dec	r0
    1b98:	e2 f7       	brpl	.-8      	; 0x1b92 <DIO_enumSetPinValue+0x106>
    1b9a:	84 2b       	or	r24, r20
    1b9c:	8c 93       	st	X, r24
    1b9e:	7b c0       	rjmp	.+246    	; 0x1c96 <DIO_enumSetPinValue+0x20a>
			}
		}
		else if (Value == DIO_PIN_LOW)
    1ba0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba2:	88 23       	and	r24, r24
    1ba4:	09 f0       	breq	.+2      	; 0x1ba8 <DIO_enumSetPinValue+0x11c>
    1ba6:	74 c0       	rjmp	.+232    	; 0x1c90 <DIO_enumSetPinValue+0x204>
		{
			switch(PORT)
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	3e 83       	std	Y+6, r19	; 0x06
    1bb0:	2d 83       	std	Y+5, r18	; 0x05
    1bb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	91 05       	cpc	r25, r1
    1bba:	59 f1       	breq	.+86     	; 0x1c12 <DIO_enumSetPinValue+0x186>
    1bbc:	2d 81       	ldd	r18, Y+5	; 0x05
    1bbe:	3e 81       	ldd	r19, Y+6	; 0x06
    1bc0:	22 30       	cpi	r18, 0x02	; 2
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	2c f4       	brge	.+10     	; 0x1bd0 <DIO_enumSetPinValue+0x144>
    1bc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	69 f0       	breq	.+26     	; 0x1be8 <DIO_enumSetPinValue+0x15c>
    1bce:	63 c0       	rjmp	.+198    	; 0x1c96 <DIO_enumSetPinValue+0x20a>
    1bd0:	2d 81       	ldd	r18, Y+5	; 0x05
    1bd2:	3e 81       	ldd	r19, Y+6	; 0x06
    1bd4:	22 30       	cpi	r18, 0x02	; 2
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	89 f1       	breq	.+98     	; 0x1c3c <DIO_enumSetPinValue+0x1b0>
    1bda:	8d 81       	ldd	r24, Y+5	; 0x05
    1bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bde:	83 30       	cpi	r24, 0x03	; 3
    1be0:	91 05       	cpc	r25, r1
    1be2:	09 f4       	brne	.+2      	; 0x1be6 <DIO_enumSetPinValue+0x15a>
    1be4:	40 c0       	rjmp	.+128    	; 0x1c66 <DIO_enumSetPinValue+0x1da>
    1be6:	57 c0       	rjmp	.+174    	; 0x1c96 <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA : ClrBit(PORTA_Register,PIN);break;
    1be8:	ab e3       	ldi	r26, 0x3B	; 59
    1bea:	b0 e0       	ldi	r27, 0x00	; 0
    1bec:	eb e3       	ldi	r30, 0x3B	; 59
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	48 2f       	mov	r20, r24
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 2e       	mov	r0, r18
    1c00:	02 c0       	rjmp	.+4      	; 0x1c06 <DIO_enumSetPinValue+0x17a>
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	0a 94       	dec	r0
    1c08:	e2 f7       	brpl	.-8      	; 0x1c02 <DIO_enumSetPinValue+0x176>
    1c0a:	80 95       	com	r24
    1c0c:	84 23       	and	r24, r20
    1c0e:	8c 93       	st	X, r24
    1c10:	42 c0       	rjmp	.+132    	; 0x1c96 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB : ClrBit(PORTB_Register,PIN);break;
    1c12:	a8 e3       	ldi	r26, 0x38	; 56
    1c14:	b0 e0       	ldi	r27, 0x00	; 0
    1c16:	e8 e3       	ldi	r30, 0x38	; 56
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	48 2f       	mov	r20, r24
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <DIO_enumSetPinValue+0x1a4>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <DIO_enumSetPinValue+0x1a0>
    1c34:	80 95       	com	r24
    1c36:	84 23       	and	r24, r20
    1c38:	8c 93       	st	X, r24
    1c3a:	2d c0       	rjmp	.+90     	; 0x1c96 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC : ClrBit(PORTC_Register,PIN);break;
    1c3c:	a5 e3       	ldi	r26, 0x35	; 53
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	e5 e3       	ldi	r30, 0x35	; 53
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	48 2f       	mov	r20, r24
    1c48:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	02 2e       	mov	r0, r18
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <DIO_enumSetPinValue+0x1ce>
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	0a 94       	dec	r0
    1c5c:	e2 f7       	brpl	.-8      	; 0x1c56 <DIO_enumSetPinValue+0x1ca>
    1c5e:	80 95       	com	r24
    1c60:	84 23       	and	r24, r20
    1c62:	8c 93       	st	X, r24
    1c64:	18 c0       	rjmp	.+48     	; 0x1c96 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD : ClrBit(PORTD_Register,PIN);break;
    1c66:	a2 e3       	ldi	r26, 0x32	; 50
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e2 e3       	ldi	r30, 0x32	; 50
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	48 2f       	mov	r20, r24
    1c72:	8b 81       	ldd	r24, Y+3	; 0x03
    1c74:	28 2f       	mov	r18, r24
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	02 2e       	mov	r0, r18
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <DIO_enumSetPinValue+0x1f8>
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	0a 94       	dec	r0
    1c86:	e2 f7       	brpl	.-8      	; 0x1c80 <DIO_enumSetPinValue+0x1f4>
    1c88:	80 95       	com	r24
    1c8a:	84 23       	and	r24, r20
    1c8c:	8c 93       	st	X, r24
    1c8e:	03 c0       	rjmp	.+6      	; 0x1c96 <DIO_enumSetPinValue+0x20a>
			}
		}
		else
			LOC_enumState = DIO_NOK;
    1c90:	19 82       	std	Y+1, r1	; 0x01
    1c92:	01 c0       	rjmp	.+2      	; 0x1c96 <DIO_enumSetPinValue+0x20a>
	}
	else
		LOC_enumState = DIO_NOK;
    1c94:	19 82       	std	Y+1, r1	; 0x01

	return LOC_enumState;
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c98:	28 96       	adiw	r28, 0x08	; 8
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	f8 94       	cli
    1c9e:	de bf       	out	0x3e, r29	; 62
    1ca0:	0f be       	out	0x3f, r0	; 63
    1ca2:	cd bf       	out	0x3d, r28	; 61
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <DIO_enumGetPinValue>:

/*This function takes the value of the input PIN in a derefrence pointer */
DIO_ErrorStatus DIO_enumGetPinValue				(u8 PORT,u8 PIN,u8 * PtrData)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	27 97       	sbiw	r28, 0x07	; 7
    1cb4:	0f b6       	in	r0, 0x3f	; 63
    1cb6:	f8 94       	cli
    1cb8:	de bf       	out	0x3e, r29	; 62
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	8a 83       	std	Y+2, r24	; 0x02
    1cc0:	6b 83       	std	Y+3, r22	; 0x03
    1cc2:	5d 83       	std	Y+5, r21	; 0x05
    1cc4:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    1cc6:	81 e0       	ldi	r24, 0x01	; 1
    1cc8:	89 83       	std	Y+1, r24	; 0x01
	if((PORT <= DIO_PORTD) &&(PIN <=DIO_PIN7))
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	84 30       	cpi	r24, 0x04	; 4
    1cce:	08 f0       	brcs	.+2      	; 0x1cd2 <DIO_enumGetPinValue+0x28>
    1cd0:	a6 c0       	rjmp	.+332    	; 0x1e1e <DIO_enumGetPinValue+0x174>
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	88 30       	cpi	r24, 0x08	; 8
    1cd6:	08 f0       	brcs	.+2      	; 0x1cda <DIO_enumGetPinValue+0x30>
    1cd8:	a2 c0       	rjmp	.+324    	; 0x1e1e <DIO_enumGetPinValue+0x174>
	{
		switch(PORT)
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	3f 83       	std	Y+7, r19	; 0x07
    1ce2:	2e 83       	std	Y+6, r18	; 0x06
    1ce4:	4e 81       	ldd	r20, Y+6	; 0x06
    1ce6:	5f 81       	ldd	r21, Y+7	; 0x07
    1ce8:	41 30       	cpi	r20, 0x01	; 1
    1cea:	51 05       	cpc	r21, r1
    1cec:	c1 f1       	breq	.+112    	; 0x1d5e <DIO_enumGetPinValue+0xb4>
    1cee:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf0:	9f 81       	ldd	r25, Y+7	; 0x07
    1cf2:	82 30       	cpi	r24, 0x02	; 2
    1cf4:	91 05       	cpc	r25, r1
    1cf6:	34 f4       	brge	.+12     	; 0x1d04 <DIO_enumGetPinValue+0x5a>
    1cf8:	2e 81       	ldd	r18, Y+6	; 0x06
    1cfa:	3f 81       	ldd	r19, Y+7	; 0x07
    1cfc:	21 15       	cp	r18, r1
    1cfe:	31 05       	cpc	r19, r1
    1d00:	71 f0       	breq	.+28     	; 0x1d1e <DIO_enumGetPinValue+0x74>
    1d02:	8e c0       	rjmp	.+284    	; 0x1e20 <DIO_enumGetPinValue+0x176>
    1d04:	4e 81       	ldd	r20, Y+6	; 0x06
    1d06:	5f 81       	ldd	r21, Y+7	; 0x07
    1d08:	42 30       	cpi	r20, 0x02	; 2
    1d0a:	51 05       	cpc	r21, r1
    1d0c:	09 f4       	brne	.+2      	; 0x1d10 <DIO_enumGetPinValue+0x66>
    1d0e:	47 c0       	rjmp	.+142    	; 0x1d9e <DIO_enumGetPinValue+0xf4>
    1d10:	8e 81       	ldd	r24, Y+6	; 0x06
    1d12:	9f 81       	ldd	r25, Y+7	; 0x07
    1d14:	83 30       	cpi	r24, 0x03	; 3
    1d16:	91 05       	cpc	r25, r1
    1d18:	09 f4       	brne	.+2      	; 0x1d1c <DIO_enumGetPinValue+0x72>
    1d1a:	61 c0       	rjmp	.+194    	; 0x1dde <DIO_enumGetPinValue+0x134>
    1d1c:	81 c0       	rjmp	.+258    	; 0x1e20 <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA : *PtrData = GetBit(PINA_Register,PIN);break;
    1d1e:	e9 e3       	ldi	r30, 0x39	; 57
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	48 2f       	mov	r20, r24
    1d26:	50 e0       	ldi	r21, 0x00	; 0
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <DIO_enumGetPinValue+0x8e>
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	2a 95       	dec	r18
    1d3a:	e2 f7       	brpl	.-8      	; 0x1d34 <DIO_enumGetPinValue+0x8a>
    1d3c:	9a 01       	movw	r18, r20
    1d3e:	28 23       	and	r18, r24
    1d40:	39 23       	and	r19, r25
    1d42:	8b 81       	ldd	r24, Y+3	; 0x03
    1d44:	88 2f       	mov	r24, r24
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	a9 01       	movw	r20, r18
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <DIO_enumGetPinValue+0xa6>
    1d4c:	55 95       	asr	r21
    1d4e:	47 95       	ror	r20
    1d50:	8a 95       	dec	r24
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <DIO_enumGetPinValue+0xa2>
    1d54:	ca 01       	movw	r24, r20
    1d56:	ec 81       	ldd	r30, Y+4	; 0x04
    1d58:	fd 81       	ldd	r31, Y+5	; 0x05
    1d5a:	80 83       	st	Z, r24
    1d5c:	61 c0       	rjmp	.+194    	; 0x1e20 <DIO_enumGetPinValue+0x176>
		case DIO_PORTB : *PtrData = GetBit(PINB_Register,PIN);break;
    1d5e:	e6 e3       	ldi	r30, 0x36	; 54
    1d60:	f0 e0       	ldi	r31, 0x00	; 0
    1d62:	80 81       	ld	r24, Z
    1d64:	48 2f       	mov	r20, r24
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <DIO_enumGetPinValue+0xce>
    1d74:	88 0f       	add	r24, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	2a 95       	dec	r18
    1d7a:	e2 f7       	brpl	.-8      	; 0x1d74 <DIO_enumGetPinValue+0xca>
    1d7c:	9a 01       	movw	r18, r20
    1d7e:	28 23       	and	r18, r24
    1d80:	39 23       	and	r19, r25
    1d82:	8b 81       	ldd	r24, Y+3	; 0x03
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a9 01       	movw	r20, r18
    1d8a:	02 c0       	rjmp	.+4      	; 0x1d90 <DIO_enumGetPinValue+0xe6>
    1d8c:	55 95       	asr	r21
    1d8e:	47 95       	ror	r20
    1d90:	8a 95       	dec	r24
    1d92:	e2 f7       	brpl	.-8      	; 0x1d8c <DIO_enumGetPinValue+0xe2>
    1d94:	ca 01       	movw	r24, r20
    1d96:	ec 81       	ldd	r30, Y+4	; 0x04
    1d98:	fd 81       	ldd	r31, Y+5	; 0x05
    1d9a:	80 83       	st	Z, r24
    1d9c:	41 c0       	rjmp	.+130    	; 0x1e20 <DIO_enumGetPinValue+0x176>
		case DIO_PORTC : *PtrData = GetBit(PINC_Register,PIN);break;
    1d9e:	e3 e3       	ldi	r30, 0x33	; 51
    1da0:	f0 e0       	ldi	r31, 0x00	; 0
    1da2:	80 81       	ld	r24, Z
    1da4:	48 2f       	mov	r20, r24
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	8b 81       	ldd	r24, Y+3	; 0x03
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	02 c0       	rjmp	.+4      	; 0x1db8 <DIO_enumGetPinValue+0x10e>
    1db4:	88 0f       	add	r24, r24
    1db6:	99 1f       	adc	r25, r25
    1db8:	2a 95       	dec	r18
    1dba:	e2 f7       	brpl	.-8      	; 0x1db4 <DIO_enumGetPinValue+0x10a>
    1dbc:	9a 01       	movw	r18, r20
    1dbe:	28 23       	and	r18, r24
    1dc0:	39 23       	and	r19, r25
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	88 2f       	mov	r24, r24
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	a9 01       	movw	r20, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <DIO_enumGetPinValue+0x126>
    1dcc:	55 95       	asr	r21
    1dce:	47 95       	ror	r20
    1dd0:	8a 95       	dec	r24
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <DIO_enumGetPinValue+0x122>
    1dd4:	ca 01       	movw	r24, r20
    1dd6:	ec 81       	ldd	r30, Y+4	; 0x04
    1dd8:	fd 81       	ldd	r31, Y+5	; 0x05
    1dda:	80 83       	st	Z, r24
    1ddc:	21 c0       	rjmp	.+66     	; 0x1e20 <DIO_enumGetPinValue+0x176>
		case DIO_PORTD : *PtrData = GetBit(PIND_Register,PIN);break;
    1dde:	e0 e3       	ldi	r30, 0x30	; 48
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	48 2f       	mov	r20, r24
    1de6:	50 e0       	ldi	r21, 0x00	; 0
    1de8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dea:	28 2f       	mov	r18, r24
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <DIO_enumGetPinValue+0x14e>
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	2a 95       	dec	r18
    1dfa:	e2 f7       	brpl	.-8      	; 0x1df4 <DIO_enumGetPinValue+0x14a>
    1dfc:	9a 01       	movw	r18, r20
    1dfe:	28 23       	and	r18, r24
    1e00:	39 23       	and	r19, r25
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	88 2f       	mov	r24, r24
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	a9 01       	movw	r20, r18
    1e0a:	02 c0       	rjmp	.+4      	; 0x1e10 <DIO_enumGetPinValue+0x166>
    1e0c:	55 95       	asr	r21
    1e0e:	47 95       	ror	r20
    1e10:	8a 95       	dec	r24
    1e12:	e2 f7       	brpl	.-8      	; 0x1e0c <DIO_enumGetPinValue+0x162>
    1e14:	ca 01       	movw	r24, r20
    1e16:	ec 81       	ldd	r30, Y+4	; 0x04
    1e18:	fd 81       	ldd	r31, Y+5	; 0x05
    1e1a:	80 83       	st	Z, r24
    1e1c:	01 c0       	rjmp	.+2      	; 0x1e20 <DIO_enumGetPinValue+0x176>
		}
	}
	else
		LOC_enumState = DIO_NOK;
    1e1e:	19 82       	std	Y+1, r1	; 0x01

	return LOC_enumState;
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e22:	27 96       	adiw	r28, 0x07	; 7
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <DIO_enumTogglePinValue>:

/*This function toggle the pin value in case it is an output PIN */
DIO_ErrorStatus DIO_enumTogglePinValue				(u8  PORT,u8  PIN)
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <DIO_enumTogglePinValue+0x6>
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <DIO_enumTogglePinValue+0x8>
    1e3c:	0f 92       	push	r0
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	8a 83       	std	Y+2, r24	; 0x02
    1e44:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	89 83       	std	Y+1, r24	; 0x01
	if((PORT <= DIO_PORTD) &&(PIN <=DIO_PIN7))
    1e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4c:	84 30       	cpi	r24, 0x04	; 4
    1e4e:	08 f0       	brcs	.+2      	; 0x1e52 <DIO_enumTogglePinValue+0x1e>
    1e50:	73 c0       	rjmp	.+230    	; 0x1f38 <DIO_enumTogglePinValue+0x104>
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	88 30       	cpi	r24, 0x08	; 8
    1e56:	08 f0       	brcs	.+2      	; 0x1e5a <DIO_enumTogglePinValue+0x26>
    1e58:	6f c0       	rjmp	.+222    	; 0x1f38 <DIO_enumTogglePinValue+0x104>
		{
			switch(PORT)
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	28 2f       	mov	r18, r24
    1e5e:	30 e0       	ldi	r19, 0x00	; 0
    1e60:	3d 83       	std	Y+5, r19	; 0x05
    1e62:	2c 83       	std	Y+4, r18	; 0x04
    1e64:	8c 81       	ldd	r24, Y+4	; 0x04
    1e66:	9d 81       	ldd	r25, Y+5	; 0x05
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	91 05       	cpc	r25, r1
    1e6c:	49 f1       	breq	.+82     	; 0x1ec0 <DIO_enumTogglePinValue+0x8c>
    1e6e:	2c 81       	ldd	r18, Y+4	; 0x04
    1e70:	3d 81       	ldd	r19, Y+5	; 0x05
    1e72:	22 30       	cpi	r18, 0x02	; 2
    1e74:	31 05       	cpc	r19, r1
    1e76:	2c f4       	brge	.+10     	; 0x1e82 <DIO_enumTogglePinValue+0x4e>
    1e78:	8c 81       	ldd	r24, Y+4	; 0x04
    1e7a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e7c:	00 97       	sbiw	r24, 0x00	; 0
    1e7e:	61 f0       	breq	.+24     	; 0x1e98 <DIO_enumTogglePinValue+0x64>
    1e80:	5c c0       	rjmp	.+184    	; 0x1f3a <DIO_enumTogglePinValue+0x106>
    1e82:	2c 81       	ldd	r18, Y+4	; 0x04
    1e84:	3d 81       	ldd	r19, Y+5	; 0x05
    1e86:	22 30       	cpi	r18, 0x02	; 2
    1e88:	31 05       	cpc	r19, r1
    1e8a:	71 f1       	breq	.+92     	; 0x1ee8 <DIO_enumTogglePinValue+0xb4>
    1e8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e90:	83 30       	cpi	r24, 0x03	; 3
    1e92:	91 05       	cpc	r25, r1
    1e94:	e9 f1       	breq	.+122    	; 0x1f10 <DIO_enumTogglePinValue+0xdc>
    1e96:	51 c0       	rjmp	.+162    	; 0x1f3a <DIO_enumTogglePinValue+0x106>
			{
			case DIO_PORTA : ToggleBit(PORTA_Register,PIN);break;
    1e98:	ab e3       	ldi	r26, 0x3B	; 59
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	eb e3       	ldi	r30, 0x3B	; 59
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	48 2f       	mov	r20, r24
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	28 2f       	mov	r18, r24
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	02 2e       	mov	r0, r18
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <DIO_enumTogglePinValue+0x82>
    1eb2:	88 0f       	add	r24, r24
    1eb4:	99 1f       	adc	r25, r25
    1eb6:	0a 94       	dec	r0
    1eb8:	e2 f7       	brpl	.-8      	; 0x1eb2 <DIO_enumTogglePinValue+0x7e>
    1eba:	84 27       	eor	r24, r20
    1ebc:	8c 93       	st	X, r24
    1ebe:	3d c0       	rjmp	.+122    	; 0x1f3a <DIO_enumTogglePinValue+0x106>
			case DIO_PORTB : ToggleBit(PORTB_Register,PIN);break;
    1ec0:	a8 e3       	ldi	r26, 0x38	; 56
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e8 e3       	ldi	r30, 0x38	; 56
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	48 2f       	mov	r20, r24
    1ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ece:	28 2f       	mov	r18, r24
    1ed0:	30 e0       	ldi	r19, 0x00	; 0
    1ed2:	81 e0       	ldi	r24, 0x01	; 1
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
    1ed6:	02 2e       	mov	r0, r18
    1ed8:	02 c0       	rjmp	.+4      	; 0x1ede <DIO_enumTogglePinValue+0xaa>
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	0a 94       	dec	r0
    1ee0:	e2 f7       	brpl	.-8      	; 0x1eda <DIO_enumTogglePinValue+0xa6>
    1ee2:	84 27       	eor	r24, r20
    1ee4:	8c 93       	st	X, r24
    1ee6:	29 c0       	rjmp	.+82     	; 0x1f3a <DIO_enumTogglePinValue+0x106>
			case DIO_PORTC : ToggleBit(PORTC_Register,PIN);break;
    1ee8:	a5 e3       	ldi	r26, 0x35	; 53
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e5 e3       	ldi	r30, 0x35	; 53
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	48 2f       	mov	r20, r24
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	02 2e       	mov	r0, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <DIO_enumTogglePinValue+0xd2>
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	0a 94       	dec	r0
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <DIO_enumTogglePinValue+0xce>
    1f0a:	84 27       	eor	r24, r20
    1f0c:	8c 93       	st	X, r24
    1f0e:	15 c0       	rjmp	.+42     	; 0x1f3a <DIO_enumTogglePinValue+0x106>
			case DIO_PORTD : ToggleBit(PORTD_Register,PIN);break;
    1f10:	a2 e3       	ldi	r26, 0x32	; 50
    1f12:	b0 e0       	ldi	r27, 0x00	; 0
    1f14:	e2 e3       	ldi	r30, 0x32	; 50
    1f16:	f0 e0       	ldi	r31, 0x00	; 0
    1f18:	80 81       	ld	r24, Z
    1f1a:	48 2f       	mov	r20, r24
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	28 2f       	mov	r18, r24
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	02 2e       	mov	r0, r18
    1f28:	02 c0       	rjmp	.+4      	; 0x1f2e <DIO_enumTogglePinValue+0xfa>
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	0a 94       	dec	r0
    1f30:	e2 f7       	brpl	.-8      	; 0x1f2a <DIO_enumTogglePinValue+0xf6>
    1f32:	84 27       	eor	r24, r20
    1f34:	8c 93       	st	X, r24
    1f36:	01 c0       	rjmp	.+2      	; 0x1f3a <DIO_enumTogglePinValue+0x106>
			}
		}
		else
			LOC_enumState = DIO_NOK;
    1f38:	19 82       	std	Y+1, r1	; 0x01

		return LOC_enumState;
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	0f 90       	pop	r0
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	cf 91       	pop	r28
    1f48:	df 91       	pop	r29
    1f4a:	08 95       	ret

00001f4c <DIO_enumConnect_Disconnect_Pullup>:

/*This Function enables the internal pull-up of the pin*/
DIO_ErrorStatus DIO_enumConnect_Disconnect_Pullup			(u8 PORT , u8 PIN,u8 Connect_PullUP)
{	
    1f4c:	df 93       	push	r29
    1f4e:	cf 93       	push	r28
    1f50:	00 d0       	rcall	.+0      	; 0x1f52 <DIO_enumConnect_Disconnect_Pullup+0x6>
    1f52:	00 d0       	rcall	.+0      	; 0x1f54 <DIO_enumConnect_Disconnect_Pullup+0x8>
    1f54:	00 d0       	rcall	.+0      	; 0x1f56 <DIO_enumConnect_Disconnect_Pullup+0xa>
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	8a 83       	std	Y+2, r24	; 0x02
    1f5c:	6b 83       	std	Y+3, r22	; 0x03
    1f5e:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	89 83       	std	Y+1, r24	; 0x01
	
	if((PORT<=DIO_PORTD)&&(PIN<=DIO_PIN7))
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	84 30       	cpi	r24, 0x04	; 4
    1f68:	08 f0       	brcs	.+2      	; 0x1f6c <DIO_enumConnect_Disconnect_Pullup+0x20>
    1f6a:	3e c1       	rjmp	.+636    	; 0x21e8 <DIO_enumConnect_Disconnect_Pullup+0x29c>
    1f6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6e:	88 30       	cpi	r24, 0x08	; 8
    1f70:	08 f0       	brcs	.+2      	; 0x1f74 <DIO_enumConnect_Disconnect_Pullup+0x28>
    1f72:	3a c1       	rjmp	.+628    	; 0x21e8 <DIO_enumConnect_Disconnect_Pullup+0x29c>
	{
		switch(PORT)
    1f74:	8a 81       	ldd	r24, Y+2	; 0x02
    1f76:	28 2f       	mov	r18, r24
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	3e 83       	std	Y+6, r19	; 0x06
    1f7c:	2d 83       	std	Y+5, r18	; 0x05
    1f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f80:	9e 81       	ldd	r25, Y+6	; 0x06
    1f82:	81 30       	cpi	r24, 0x01	; 1
    1f84:	91 05       	cpc	r25, r1
    1f86:	09 f4       	brne	.+2      	; 0x1f8a <DIO_enumConnect_Disconnect_Pullup+0x3e>
    1f88:	5d c0       	rjmp	.+186    	; 0x2044 <DIO_enumConnect_Disconnect_Pullup+0xf8>
    1f8a:	2d 81       	ldd	r18, Y+5	; 0x05
    1f8c:	3e 81       	ldd	r19, Y+6	; 0x06
    1f8e:	22 30       	cpi	r18, 0x02	; 2
    1f90:	31 05       	cpc	r19, r1
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <DIO_enumConnect_Disconnect_Pullup+0x52>
    1f94:	8d 81       	ldd	r24, Y+5	; 0x05
    1f96:	9e 81       	ldd	r25, Y+6	; 0x06
    1f98:	00 97       	sbiw	r24, 0x00	; 0
    1f9a:	71 f0       	breq	.+28     	; 0x1fb8 <DIO_enumConnect_Disconnect_Pullup+0x6c>
    1f9c:	26 c1       	rjmp	.+588    	; 0x21ea <DIO_enumConnect_Disconnect_Pullup+0x29e>
    1f9e:	2d 81       	ldd	r18, Y+5	; 0x05
    1fa0:	3e 81       	ldd	r19, Y+6	; 0x06
    1fa2:	22 30       	cpi	r18, 0x02	; 2
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	09 f4       	brne	.+2      	; 0x1faa <DIO_enumConnect_Disconnect_Pullup+0x5e>
    1fa8:	93 c0       	rjmp	.+294    	; 0x20d0 <DIO_enumConnect_Disconnect_Pullup+0x184>
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	9e 81       	ldd	r25, Y+6	; 0x06
    1fae:	83 30       	cpi	r24, 0x03	; 3
    1fb0:	91 05       	cpc	r25, r1
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <DIO_enumConnect_Disconnect_Pullup+0x6a>
    1fb4:	d3 c0       	rjmp	.+422    	; 0x215c <DIO_enumConnect_Disconnect_Pullup+0x210>
    1fb6:	19 c1       	rjmp	.+562    	; 0x21ea <DIO_enumConnect_Disconnect_Pullup+0x29e>
		{
			case DIO_PORTA:
				if(Connect_PullUP == DIO_PIN_PULLUP_YES)
    1fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fba:	81 30       	cpi	r24, 0x01	; 1
    1fbc:	71 f5       	brne	.+92     	; 0x201a <DIO_enumConnect_Disconnect_Pullup+0xce>
				{
					/*Active the Internal Pull-up of the Pin*/
					ClrBit(SFIOR,PUD);
    1fbe:	a0 e5       	ldi	r26, 0x50	; 80
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e0 e5       	ldi	r30, 0x50	; 80
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	8b 7f       	andi	r24, 0xFB	; 251
    1fca:	8c 93       	st	X, r24
					ClrBit(DDRA_Register,PIN);
    1fcc:	aa e3       	ldi	r26, 0x3A	; 58
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	ea e3       	ldi	r30, 0x3A	; 58
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	48 2f       	mov	r20, r24
    1fd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <DIO_enumConnect_Disconnect_Pullup+0x9c>
    1fe4:	88 0f       	add	r24, r24
    1fe6:	99 1f       	adc	r25, r25
    1fe8:	2a 95       	dec	r18
    1fea:	e2 f7       	brpl	.-8      	; 0x1fe4 <DIO_enumConnect_Disconnect_Pullup+0x98>
    1fec:	80 95       	com	r24
    1fee:	84 23       	and	r24, r20
    1ff0:	8c 93       	st	X, r24
					SetBit(PORTA_Register,PIN);
    1ff2:	ab e3       	ldi	r26, 0x3B	; 59
    1ff4:	b0 e0       	ldi	r27, 0x00	; 0
    1ff6:	eb e3       	ldi	r30, 0x3B	; 59
    1ff8:	f0 e0       	ldi	r31, 0x00	; 0
    1ffa:	80 81       	ld	r24, Z
    1ffc:	48 2f       	mov	r20, r24
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	28 2f       	mov	r18, r24
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	02 2e       	mov	r0, r18
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <DIO_enumConnect_Disconnect_Pullup+0xc4>
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	0a 94       	dec	r0
    2012:	e2 f7       	brpl	.-8      	; 0x200c <DIO_enumConnect_Disconnect_Pullup+0xc0>
    2014:	84 2b       	or	r24, r20
    2016:	8c 93       	st	X, r24
    2018:	e8 c0       	rjmp	.+464    	; 0x21ea <DIO_enumConnect_Disconnect_Pullup+0x29e>
				}
				else 
				{
					//Disable the Internal Pull-up of the PIN
					ClrBit(PORTA_Register,PIN);
    201a:	ab e3       	ldi	r26, 0x3B	; 59
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	eb e3       	ldi	r30, 0x3B	; 59
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	80 81       	ld	r24, Z
    2024:	48 2f       	mov	r20, r24
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	02 2e       	mov	r0, r18
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <DIO_enumConnect_Disconnect_Pullup+0xec>
    2034:	88 0f       	add	r24, r24
    2036:	99 1f       	adc	r25, r25
    2038:	0a 94       	dec	r0
    203a:	e2 f7       	brpl	.-8      	; 0x2034 <DIO_enumConnect_Disconnect_Pullup+0xe8>
    203c:	80 95       	com	r24
    203e:	84 23       	and	r24, r20
    2040:	8c 93       	st	X, r24
    2042:	d3 c0       	rjmp	.+422    	; 0x21ea <DIO_enumConnect_Disconnect_Pullup+0x29e>
				}
				break;
				
			case DIO_PORTB:
				if(Connect_PullUP == DIO_PIN_PULLUP_YES)
    2044:	8c 81       	ldd	r24, Y+4	; 0x04
    2046:	81 30       	cpi	r24, 0x01	; 1
    2048:	71 f5       	brne	.+92     	; 0x20a6 <DIO_enumConnect_Disconnect_Pullup+0x15a>
				{
					/*Active the Internal Pull-up of the Pin*/
					ClrBit(SFIOR,PUD);
    204a:	a0 e5       	ldi	r26, 0x50	; 80
    204c:	b0 e0       	ldi	r27, 0x00	; 0
    204e:	e0 e5       	ldi	r30, 0x50	; 80
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	8b 7f       	andi	r24, 0xFB	; 251
    2056:	8c 93       	st	X, r24
					ClrBit(DDRB_Register,PIN);
    2058:	a7 e3       	ldi	r26, 0x37	; 55
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e7 e3       	ldi	r30, 0x37	; 55
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	48 2f       	mov	r20, r24
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <DIO_enumConnect_Disconnect_Pullup+0x128>
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	2a 95       	dec	r18
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <DIO_enumConnect_Disconnect_Pullup+0x124>
    2078:	80 95       	com	r24
    207a:	84 23       	and	r24, r20
    207c:	8c 93       	st	X, r24
					SetBit(PORTB_Register,PIN);
    207e:	a8 e3       	ldi	r26, 0x38	; 56
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e8 e3       	ldi	r30, 0x38	; 56
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	48 2f       	mov	r20, r24
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	02 2e       	mov	r0, r18
    2096:	02 c0       	rjmp	.+4      	; 0x209c <DIO_enumConnect_Disconnect_Pullup+0x150>
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	0a 94       	dec	r0
    209e:	e2 f7       	brpl	.-8      	; 0x2098 <DIO_enumConnect_Disconnect_Pullup+0x14c>
    20a0:	84 2b       	or	r24, r20
    20a2:	8c 93       	st	X, r24
    20a4:	a2 c0       	rjmp	.+324    	; 0x21ea <DIO_enumConnect_Disconnect_Pullup+0x29e>
				}
				else 
				{
					//Disable the Internal Pull-up of the PIN
					ClrBit(PORTB_Register,PIN);
    20a6:	a8 e3       	ldi	r26, 0x38	; 56
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e8 e3       	ldi	r30, 0x38	; 56
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	48 2f       	mov	r20, r24
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	02 2e       	mov	r0, r18
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <DIO_enumConnect_Disconnect_Pullup+0x178>
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	0a 94       	dec	r0
    20c6:	e2 f7       	brpl	.-8      	; 0x20c0 <DIO_enumConnect_Disconnect_Pullup+0x174>
    20c8:	80 95       	com	r24
    20ca:	84 23       	and	r24, r20
    20cc:	8c 93       	st	X, r24
    20ce:	8d c0       	rjmp	.+282    	; 0x21ea <DIO_enumConnect_Disconnect_Pullup+0x29e>
				}
				break;
				
			case DIO_PORTC:
				if(Connect_PullUP == DIO_PIN_PULLUP_YES)
    20d0:	8c 81       	ldd	r24, Y+4	; 0x04
    20d2:	81 30       	cpi	r24, 0x01	; 1
    20d4:	71 f5       	brne	.+92     	; 0x2132 <DIO_enumConnect_Disconnect_Pullup+0x1e6>
				{
					/*Active the Internal Pull-up of the Pin*/
					ClrBit(SFIOR,PUD);
    20d6:	a0 e5       	ldi	r26, 0x50	; 80
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e0 e5       	ldi	r30, 0x50	; 80
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	8b 7f       	andi	r24, 0xFB	; 251
    20e2:	8c 93       	st	X, r24
					ClrBit(DDRC_Register,PIN);
    20e4:	a4 e3       	ldi	r26, 0x34	; 52
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e4 e3       	ldi	r30, 0x34	; 52
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	48 2f       	mov	r20, r24
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <DIO_enumConnect_Disconnect_Pullup+0x1b4>
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	2a 95       	dec	r18
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <DIO_enumConnect_Disconnect_Pullup+0x1b0>
    2104:	80 95       	com	r24
    2106:	84 23       	and	r24, r20
    2108:	8c 93       	st	X, r24
					SetBit(PORTC_Register,PIN);
    210a:	a5 e3       	ldi	r26, 0x35	; 53
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e5 e3       	ldi	r30, 0x35	; 53
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	48 2f       	mov	r20, r24
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	02 2e       	mov	r0, r18
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <DIO_enumConnect_Disconnect_Pullup+0x1dc>
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	0a 94       	dec	r0
    212a:	e2 f7       	brpl	.-8      	; 0x2124 <DIO_enumConnect_Disconnect_Pullup+0x1d8>
    212c:	84 2b       	or	r24, r20
    212e:	8c 93       	st	X, r24
    2130:	5c c0       	rjmp	.+184    	; 0x21ea <DIO_enumConnect_Disconnect_Pullup+0x29e>
				}
				else 
				{
					//Disable the Internal Pull-up of the PIN
					ClrBit(PORTC_Register,PIN);
    2132:	a5 e3       	ldi	r26, 0x35	; 53
    2134:	b0 e0       	ldi	r27, 0x00	; 0
    2136:	e5 e3       	ldi	r30, 0x35	; 53
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	80 81       	ld	r24, Z
    213c:	48 2f       	mov	r20, r24
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	28 2f       	mov	r18, r24
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	81 e0       	ldi	r24, 0x01	; 1
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	02 2e       	mov	r0, r18
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <DIO_enumConnect_Disconnect_Pullup+0x204>
    214c:	88 0f       	add	r24, r24
    214e:	99 1f       	adc	r25, r25
    2150:	0a 94       	dec	r0
    2152:	e2 f7       	brpl	.-8      	; 0x214c <DIO_enumConnect_Disconnect_Pullup+0x200>
    2154:	80 95       	com	r24
    2156:	84 23       	and	r24, r20
    2158:	8c 93       	st	X, r24
    215a:	47 c0       	rjmp	.+142    	; 0x21ea <DIO_enumConnect_Disconnect_Pullup+0x29e>
				}
				break;
					
			case DIO_PORTD:
				if(Connect_PullUP == DIO_PIN_PULLUP_YES)
    215c:	8c 81       	ldd	r24, Y+4	; 0x04
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	71 f5       	brne	.+92     	; 0x21be <DIO_enumConnect_Disconnect_Pullup+0x272>
				{
					/*Active the Internal Pull-up of the Pin*/
					ClrBit(SFIOR,PUD);
    2162:	a0 e5       	ldi	r26, 0x50	; 80
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e0 e5       	ldi	r30, 0x50	; 80
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	8b 7f       	andi	r24, 0xFB	; 251
    216e:	8c 93       	st	X, r24
					ClrBit(DDRD_Register,PIN);
    2170:	a1 e3       	ldi	r26, 0x31	; 49
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	e1 e3       	ldi	r30, 0x31	; 49
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	80 81       	ld	r24, Z
    217a:	48 2f       	mov	r20, r24
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	28 2f       	mov	r18, r24
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	81 e0       	ldi	r24, 0x01	; 1
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	02 c0       	rjmp	.+4      	; 0x218c <DIO_enumConnect_Disconnect_Pullup+0x240>
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	2a 95       	dec	r18
    218e:	e2 f7       	brpl	.-8      	; 0x2188 <DIO_enumConnect_Disconnect_Pullup+0x23c>
    2190:	80 95       	com	r24
    2192:	84 23       	and	r24, r20
    2194:	8c 93       	st	X, r24
					SetBit(PORTD_Register,PIN);
    2196:	a2 e3       	ldi	r26, 0x32	; 50
    2198:	b0 e0       	ldi	r27, 0x00	; 0
    219a:	e2 e3       	ldi	r30, 0x32	; 50
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	80 81       	ld	r24, Z
    21a0:	48 2f       	mov	r20, r24
    21a2:	8b 81       	ldd	r24, Y+3	; 0x03
    21a4:	28 2f       	mov	r18, r24
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	81 e0       	ldi	r24, 0x01	; 1
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	02 2e       	mov	r0, r18
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <DIO_enumConnect_Disconnect_Pullup+0x268>
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	0a 94       	dec	r0
    21b6:	e2 f7       	brpl	.-8      	; 0x21b0 <DIO_enumConnect_Disconnect_Pullup+0x264>
    21b8:	84 2b       	or	r24, r20
    21ba:	8c 93       	st	X, r24
    21bc:	16 c0       	rjmp	.+44     	; 0x21ea <DIO_enumConnect_Disconnect_Pullup+0x29e>
				}
				else 
				{
					//Disable the Internal Pull-up of the PIN
					ClrBit(PORTA_Register,PIN);
    21be:	ab e3       	ldi	r26, 0x3B	; 59
    21c0:	b0 e0       	ldi	r27, 0x00	; 0
    21c2:	eb e3       	ldi	r30, 0x3B	; 59
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	80 81       	ld	r24, Z
    21c8:	48 2f       	mov	r20, r24
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	28 2f       	mov	r18, r24
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	02 2e       	mov	r0, r18
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <DIO_enumConnect_Disconnect_Pullup+0x290>
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	0a 94       	dec	r0
    21de:	e2 f7       	brpl	.-8      	; 0x21d8 <DIO_enumConnect_Disconnect_Pullup+0x28c>
    21e0:	80 95       	com	r24
    21e2:	84 23       	and	r24, r20
    21e4:	8c 93       	st	X, r24
    21e6:	01 c0       	rjmp	.+2      	; 0x21ea <DIO_enumConnect_Disconnect_Pullup+0x29e>
				
		}
	}		
	else
	{
		LOC_enumState = DIO_NOK;
    21e8:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState;
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    21ec:	26 96       	adiw	r28, 0x06	; 6
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <DIO_Disable_Internal_PullUp_AllPins>:

/*Disable The Internal Pullup of all pins*/
void DIO_Disable_Internal_PullUp_AllPins	(void)
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
	SetBit(SFIOR,PUD);
    2206:	a0 e5       	ldi	r26, 0x50	; 80
    2208:	b0 e0       	ldi	r27, 0x00	; 0
    220a:	e0 e5       	ldi	r30, 0x50	; 80
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	84 60       	ori	r24, 0x04	; 4
    2212:	8c 93       	st	X, r24
}
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <DIO_enumSetPortDirection>:

/*This Function set the Direction of the full PORT */
DIO_ErrorStatus DIO_enumSetPortDirection     	(u8  PORT, u8  Direction  	)
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	00 d0       	rcall	.+0      	; 0x2220 <DIO_enumSetPortDirection+0x6>
    2220:	00 d0       	rcall	.+0      	; 0x2222 <DIO_enumSetPortDirection+0x8>
    2222:	0f 92       	push	r0
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	8a 83       	std	Y+2, r24	; 0x02
    222a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	89 83       	std	Y+1, r24	; 0x01
	if(PORT <=DIO_PORTD)
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	84 30       	cpi	r24, 0x04	; 4
    2234:	98 f5       	brcc	.+102    	; 0x229c <DIO_enumSetPortDirection+0x82>
	{
		switch(PORT)
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	28 2f       	mov	r18, r24
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	3d 83       	std	Y+5, r19	; 0x05
    223e:	2c 83       	std	Y+4, r18	; 0x04
    2240:	8c 81       	ldd	r24, Y+4	; 0x04
    2242:	9d 81       	ldd	r25, Y+5	; 0x05
    2244:	81 30       	cpi	r24, 0x01	; 1
    2246:	91 05       	cpc	r25, r1
    2248:	d1 f0       	breq	.+52     	; 0x227e <DIO_enumSetPortDirection+0x64>
    224a:	2c 81       	ldd	r18, Y+4	; 0x04
    224c:	3d 81       	ldd	r19, Y+5	; 0x05
    224e:	22 30       	cpi	r18, 0x02	; 2
    2250:	31 05       	cpc	r19, r1
    2252:	2c f4       	brge	.+10     	; 0x225e <DIO_enumSetPortDirection+0x44>
    2254:	8c 81       	ldd	r24, Y+4	; 0x04
    2256:	9d 81       	ldd	r25, Y+5	; 0x05
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	61 f0       	breq	.+24     	; 0x2274 <DIO_enumSetPortDirection+0x5a>
    225c:	20 c0       	rjmp	.+64     	; 0x229e <DIO_enumSetPortDirection+0x84>
    225e:	2c 81       	ldd	r18, Y+4	; 0x04
    2260:	3d 81       	ldd	r19, Y+5	; 0x05
    2262:	22 30       	cpi	r18, 0x02	; 2
    2264:	31 05       	cpc	r19, r1
    2266:	81 f0       	breq	.+32     	; 0x2288 <DIO_enumSetPortDirection+0x6e>
    2268:	8c 81       	ldd	r24, Y+4	; 0x04
    226a:	9d 81       	ldd	r25, Y+5	; 0x05
    226c:	83 30       	cpi	r24, 0x03	; 3
    226e:	91 05       	cpc	r25, r1
    2270:	81 f0       	breq	.+32     	; 0x2292 <DIO_enumSetPortDirection+0x78>
    2272:	15 c0       	rjmp	.+42     	; 0x229e <DIO_enumSetPortDirection+0x84>
		{
		case DIO_PORTA : DDRA_Register = Direction ;break;
    2274:	ea e3       	ldi	r30, 0x3A	; 58
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	80 83       	st	Z, r24
    227c:	10 c0       	rjmp	.+32     	; 0x229e <DIO_enumSetPortDirection+0x84>
		case DIO_PORTB : DDRB_Register = Direction ;break;
    227e:	e7 e3       	ldi	r30, 0x37	; 55
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	8b 81       	ldd	r24, Y+3	; 0x03
    2284:	80 83       	st	Z, r24
    2286:	0b c0       	rjmp	.+22     	; 0x229e <DIO_enumSetPortDirection+0x84>
		case DIO_PORTC : DDRC_Register = Direction ;break;
    2288:	e4 e3       	ldi	r30, 0x34	; 52
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	8b 81       	ldd	r24, Y+3	; 0x03
    228e:	80 83       	st	Z, r24
    2290:	06 c0       	rjmp	.+12     	; 0x229e <DIO_enumSetPortDirection+0x84>
		case DIO_PORTD : DDRD_Register = Direction ;break;
    2292:	e1 e3       	ldi	r30, 0x31	; 49
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	8b 81       	ldd	r24, Y+3	; 0x03
    2298:	80 83       	st	Z, r24
    229a:	01 c0       	rjmp	.+2      	; 0x229e <DIO_enumSetPortDirection+0x84>
		}

	}
	else
		LOC_enumState = DIO_NOK;
    229c:	19 82       	std	Y+1, r1	; 0x01
	return LOC_enumState ;
    229e:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a0:	0f 90       	pop	r0
    22a2:	0f 90       	pop	r0
    22a4:	0f 90       	pop	r0
    22a6:	0f 90       	pop	r0
    22a8:	0f 90       	pop	r0
    22aa:	cf 91       	pop	r28
    22ac:	df 91       	pop	r29
    22ae:	08 95       	ret

000022b0 <DIO_enumSetPortValue>:

/*This Function set the Value of the full PORT in case it is an output PORT */
DIO_ErrorStatus DIO_enumSetPortValue         	(u8  PORT, u8 Value      	)
{
    22b0:	df 93       	push	r29
    22b2:	cf 93       	push	r28
    22b4:	00 d0       	rcall	.+0      	; 0x22b6 <DIO_enumSetPortValue+0x6>
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <DIO_enumSetPortValue+0x8>
    22b8:	0f 92       	push	r0
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	8a 83       	std	Y+2, r24	; 0x02
    22c0:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	89 83       	std	Y+1, r24	; 0x01

	if(PORT <=DIO_PORTD)
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	84 30       	cpi	r24, 0x04	; 4
    22ca:	98 f5       	brcc	.+102    	; 0x2332 <DIO_enumSetPortValue+0x82>
	{
		switch(PORT)
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	28 2f       	mov	r18, r24
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	3d 83       	std	Y+5, r19	; 0x05
    22d4:	2c 83       	std	Y+4, r18	; 0x04
    22d6:	8c 81       	ldd	r24, Y+4	; 0x04
    22d8:	9d 81       	ldd	r25, Y+5	; 0x05
    22da:	81 30       	cpi	r24, 0x01	; 1
    22dc:	91 05       	cpc	r25, r1
    22de:	d1 f0       	breq	.+52     	; 0x2314 <DIO_enumSetPortValue+0x64>
    22e0:	2c 81       	ldd	r18, Y+4	; 0x04
    22e2:	3d 81       	ldd	r19, Y+5	; 0x05
    22e4:	22 30       	cpi	r18, 0x02	; 2
    22e6:	31 05       	cpc	r19, r1
    22e8:	2c f4       	brge	.+10     	; 0x22f4 <DIO_enumSetPortValue+0x44>
    22ea:	8c 81       	ldd	r24, Y+4	; 0x04
    22ec:	9d 81       	ldd	r25, Y+5	; 0x05
    22ee:	00 97       	sbiw	r24, 0x00	; 0
    22f0:	61 f0       	breq	.+24     	; 0x230a <DIO_enumSetPortValue+0x5a>
    22f2:	20 c0       	rjmp	.+64     	; 0x2334 <DIO_enumSetPortValue+0x84>
    22f4:	2c 81       	ldd	r18, Y+4	; 0x04
    22f6:	3d 81       	ldd	r19, Y+5	; 0x05
    22f8:	22 30       	cpi	r18, 0x02	; 2
    22fa:	31 05       	cpc	r19, r1
    22fc:	81 f0       	breq	.+32     	; 0x231e <DIO_enumSetPortValue+0x6e>
    22fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2300:	9d 81       	ldd	r25, Y+5	; 0x05
    2302:	83 30       	cpi	r24, 0x03	; 3
    2304:	91 05       	cpc	r25, r1
    2306:	81 f0       	breq	.+32     	; 0x2328 <DIO_enumSetPortValue+0x78>
    2308:	15 c0       	rjmp	.+42     	; 0x2334 <DIO_enumSetPortValue+0x84>
		{
		case DIO_PORTA : PORTA_Register = Value ;break;
    230a:	eb e3       	ldi	r30, 0x3B	; 59
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	80 83       	st	Z, r24
    2312:	10 c0       	rjmp	.+32     	; 0x2334 <DIO_enumSetPortValue+0x84>
		case DIO_PORTB : PORTB_Register = Value ;break;
    2314:	e8 e3       	ldi	r30, 0x38	; 56
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	8b 81       	ldd	r24, Y+3	; 0x03
    231a:	80 83       	st	Z, r24
    231c:	0b c0       	rjmp	.+22     	; 0x2334 <DIO_enumSetPortValue+0x84>
		case DIO_PORTC : PORTC_Register = Value ;break;
    231e:	e5 e3       	ldi	r30, 0x35	; 53
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	80 83       	st	Z, r24
    2326:	06 c0       	rjmp	.+12     	; 0x2334 <DIO_enumSetPortValue+0x84>
		case DIO_PORTD : PORTD_Register = Value ;break;
    2328:	e2 e3       	ldi	r30, 0x32	; 50
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	80 83       	st	Z, r24
    2330:	01 c0       	rjmp	.+2      	; 0x2334 <DIO_enumSetPortValue+0x84>
		}

	}
	else
		LOC_enumState = DIO_NOK;
    2332:	19 82       	std	Y+1, r1	; 0x01

	return LOC_enumState ;
    2334:	89 81       	ldd	r24, Y+1	; 0x01
}
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	cf 91       	pop	r28
    2342:	df 91       	pop	r29
    2344:	08 95       	ret

00002346 <DIO_enumGetPortValue>:

/*This function get the value of the full PORT*/
DIO_ErrorStatus DIO_enumGetPortValue         	(u8  PORT, u8 *  PtrData    	)
{
    2346:	df 93       	push	r29
    2348:	cf 93       	push	r28
    234a:	00 d0       	rcall	.+0      	; 0x234c <DIO_enumGetPortValue+0x6>
    234c:	00 d0       	rcall	.+0      	; 0x234e <DIO_enumGetPortValue+0x8>
    234e:	00 d0       	rcall	.+0      	; 0x2350 <DIO_enumGetPortValue+0xa>
    2350:	cd b7       	in	r28, 0x3d	; 61
    2352:	de b7       	in	r29, 0x3e	; 62
    2354:	8a 83       	std	Y+2, r24	; 0x02
    2356:	7c 83       	std	Y+4, r23	; 0x04
    2358:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	89 83       	std	Y+1, r24	; 0x01

	if(PORT <=DIO_PORTD)
    235e:	8a 81       	ldd	r24, Y+2	; 0x02
    2360:	84 30       	cpi	r24, 0x04	; 4
    2362:	d8 f5       	brcc	.+118    	; 0x23da <DIO_enumGetPortValue+0x94>
	{
		switch(PORT)
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	28 2f       	mov	r18, r24
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	3e 83       	std	Y+6, r19	; 0x06
    236c:	2d 83       	std	Y+5, r18	; 0x05
    236e:	8d 81       	ldd	r24, Y+5	; 0x05
    2370:	9e 81       	ldd	r25, Y+6	; 0x06
    2372:	81 30       	cpi	r24, 0x01	; 1
    2374:	91 05       	cpc	r25, r1
    2376:	e1 f0       	breq	.+56     	; 0x23b0 <DIO_enumGetPortValue+0x6a>
    2378:	2d 81       	ldd	r18, Y+5	; 0x05
    237a:	3e 81       	ldd	r19, Y+6	; 0x06
    237c:	22 30       	cpi	r18, 0x02	; 2
    237e:	31 05       	cpc	r19, r1
    2380:	2c f4       	brge	.+10     	; 0x238c <DIO_enumGetPortValue+0x46>
    2382:	8d 81       	ldd	r24, Y+5	; 0x05
    2384:	9e 81       	ldd	r25, Y+6	; 0x06
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	61 f0       	breq	.+24     	; 0x23a2 <DIO_enumGetPortValue+0x5c>
    238a:	28 c0       	rjmp	.+80     	; 0x23dc <DIO_enumGetPortValue+0x96>
    238c:	2d 81       	ldd	r18, Y+5	; 0x05
    238e:	3e 81       	ldd	r19, Y+6	; 0x06
    2390:	22 30       	cpi	r18, 0x02	; 2
    2392:	31 05       	cpc	r19, r1
    2394:	a1 f0       	breq	.+40     	; 0x23be <DIO_enumGetPortValue+0x78>
    2396:	8d 81       	ldd	r24, Y+5	; 0x05
    2398:	9e 81       	ldd	r25, Y+6	; 0x06
    239a:	83 30       	cpi	r24, 0x03	; 3
    239c:	91 05       	cpc	r25, r1
    239e:	b1 f0       	breq	.+44     	; 0x23cc <DIO_enumGetPortValue+0x86>
    23a0:	1d c0       	rjmp	.+58     	; 0x23dc <DIO_enumGetPortValue+0x96>
		{
		case DIO_PORTA : *PtrData = PINA_Register;break;
    23a2:	e9 e3       	ldi	r30, 0x39	; 57
    23a4:	f0 e0       	ldi	r31, 0x00	; 0
    23a6:	80 81       	ld	r24, Z
    23a8:	eb 81       	ldd	r30, Y+3	; 0x03
    23aa:	fc 81       	ldd	r31, Y+4	; 0x04
    23ac:	80 83       	st	Z, r24
    23ae:	16 c0       	rjmp	.+44     	; 0x23dc <DIO_enumGetPortValue+0x96>
		case DIO_PORTB : *PtrData = PINB_Register;break;
    23b0:	e6 e3       	ldi	r30, 0x36	; 54
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	eb 81       	ldd	r30, Y+3	; 0x03
    23b8:	fc 81       	ldd	r31, Y+4	; 0x04
    23ba:	80 83       	st	Z, r24
    23bc:	0f c0       	rjmp	.+30     	; 0x23dc <DIO_enumGetPortValue+0x96>
		case DIO_PORTC : *PtrData = PINC_Register;break;
    23be:	e3 e3       	ldi	r30, 0x33	; 51
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	eb 81       	ldd	r30, Y+3	; 0x03
    23c6:	fc 81       	ldd	r31, Y+4	; 0x04
    23c8:	80 83       	st	Z, r24
    23ca:	08 c0       	rjmp	.+16     	; 0x23dc <DIO_enumGetPortValue+0x96>
		case DIO_PORTD : *PtrData = PIND_Register;break;
    23cc:	e0 e3       	ldi	r30, 0x30	; 48
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	80 81       	ld	r24, Z
    23d2:	eb 81       	ldd	r30, Y+3	; 0x03
    23d4:	fc 81       	ldd	r31, Y+4	; 0x04
    23d6:	80 83       	st	Z, r24
    23d8:	01 c0       	rjmp	.+2      	; 0x23dc <DIO_enumGetPortValue+0x96>
		}

	}
	else
		LOC_enumState = DIO_NOK;
    23da:	19 82       	std	Y+1, r1	; 0x01

	return LOC_enumState ;
    23dc:	89 81       	ldd	r24, Y+1	; 0x01
}
    23de:	26 96       	adiw	r28, 0x06	; 6
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <DIO_enumTogglePortValue>:

/*This function toggle the full PORT value in case if the PORT is output PORT  */
DIO_ErrorStatus DIO_enumTogglePortValue      	(u8  PORT                   	)
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	00 d0       	rcall	.+0      	; 0x23f6 <DIO_enumTogglePortValue+0x6>
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <DIO_enumTogglePortValue+0x8>
    23f8:	cd b7       	in	r28, 0x3d	; 61
    23fa:	de b7       	in	r29, 0x3e	; 62
    23fc:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK;
    23fe:	81 e0       	ldi	r24, 0x01	; 1
    2400:	89 83       	std	Y+1, r24	; 0x01

	if(PORT <=DIO_PORTD)
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	84 30       	cpi	r24, 0x04	; 4
    2406:	08 f0       	brcs	.+2      	; 0x240a <DIO_enumTogglePortValue+0x1a>
    2408:	3f c0       	rjmp	.+126    	; 0x2488 <DIO_enumTogglePortValue+0x98>
	{
		switch(PORT)
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	3c 83       	std	Y+4, r19	; 0x04
    2412:	2b 83       	std	Y+3, r18	; 0x03
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	81 30       	cpi	r24, 0x01	; 1
    241a:	91 05       	cpc	r25, r1
    241c:	e9 f0       	breq	.+58     	; 0x2458 <DIO_enumTogglePortValue+0x68>
    241e:	2b 81       	ldd	r18, Y+3	; 0x03
    2420:	3c 81       	ldd	r19, Y+4	; 0x04
    2422:	22 30       	cpi	r18, 0x02	; 2
    2424:	31 05       	cpc	r19, r1
    2426:	2c f4       	brge	.+10     	; 0x2432 <DIO_enumTogglePortValue+0x42>
    2428:	8b 81       	ldd	r24, Y+3	; 0x03
    242a:	9c 81       	ldd	r25, Y+4	; 0x04
    242c:	00 97       	sbiw	r24, 0x00	; 0
    242e:	61 f0       	breq	.+24     	; 0x2448 <DIO_enumTogglePortValue+0x58>
    2430:	2c c0       	rjmp	.+88     	; 0x248a <DIO_enumTogglePortValue+0x9a>
    2432:	2b 81       	ldd	r18, Y+3	; 0x03
    2434:	3c 81       	ldd	r19, Y+4	; 0x04
    2436:	22 30       	cpi	r18, 0x02	; 2
    2438:	31 05       	cpc	r19, r1
    243a:	b1 f0       	breq	.+44     	; 0x2468 <DIO_enumTogglePortValue+0x78>
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	9c 81       	ldd	r25, Y+4	; 0x04
    2440:	83 30       	cpi	r24, 0x03	; 3
    2442:	91 05       	cpc	r25, r1
    2444:	c9 f0       	breq	.+50     	; 0x2478 <DIO_enumTogglePortValue+0x88>
    2446:	21 c0       	rjmp	.+66     	; 0x248a <DIO_enumTogglePortValue+0x9a>
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register;break;
    2448:	ab e3       	ldi	r26, 0x3B	; 59
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	eb e3       	ldi	r30, 0x3B	; 59
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	80 95       	com	r24
    2454:	8c 93       	st	X, r24
    2456:	19 c0       	rjmp	.+50     	; 0x248a <DIO_enumTogglePortValue+0x9a>
		case DIO_PORTB : PORTB_Register = ~PORTA_Register;break;
    2458:	a8 e3       	ldi	r26, 0x38	; 56
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	eb e3       	ldi	r30, 0x3B	; 59
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	80 95       	com	r24
    2464:	8c 93       	st	X, r24
    2466:	11 c0       	rjmp	.+34     	; 0x248a <DIO_enumTogglePortValue+0x9a>
		case DIO_PORTC : PORTC_Register = ~PORTA_Register;break;
    2468:	a5 e3       	ldi	r26, 0x35	; 53
    246a:	b0 e0       	ldi	r27, 0x00	; 0
    246c:	eb e3       	ldi	r30, 0x3B	; 59
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	80 81       	ld	r24, Z
    2472:	80 95       	com	r24
    2474:	8c 93       	st	X, r24
    2476:	09 c0       	rjmp	.+18     	; 0x248a <DIO_enumTogglePortValue+0x9a>
		case DIO_PORTD : PORTD_Register = ~PORTA_Register;break;
    2478:	a2 e3       	ldi	r26, 0x32	; 50
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	eb e3       	ldi	r30, 0x3B	; 59
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	80 95       	com	r24
    2484:	8c 93       	st	X, r24
    2486:	01 c0       	rjmp	.+2      	; 0x248a <DIO_enumTogglePortValue+0x9a>
		}

	}
	else
		LOC_enumState = DIO_NOK;
    2488:	19 82       	std	Y+1, r1	; 0x01

	return LOC_enumState ;
    248a:	89 81       	ldd	r24, Y+1	; 0x01
}
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	08 95       	ret

0000249a <SSD_Init>:

static u8 Local_SSD_NUMBERS[10] = SSD_Number_ARR ;

//This function set the port connected to the SSD to OUTPUT PORT
void SSD_Init(SSD_Type SSD_Configuration)
{
    249a:	df 93       	push	r29
    249c:	cf 93       	push	r28
    249e:	00 d0       	rcall	.+0      	; 0x24a0 <SSD_Init+0x6>
    24a0:	00 d0       	rcall	.+0      	; 0x24a2 <SSD_Init+0x8>
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
    24a6:	69 83       	std	Y+1, r22	; 0x01
    24a8:	7a 83       	std	Y+2, r23	; 0x02
    24aa:	8b 83       	std	Y+3, r24	; 0x03
    24ac:	9c 83       	std	Y+4, r25	; 0x04
	 DIO_enumSetPortDirection    ( SSD_Configuration.DataPort ,DIO_PORT_OUTPUT );
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	6f ef       	ldi	r22, 0xFF	; 255
    24b2:	0e 94 0d 11 	call	0x221a	; 0x221a <DIO_enumSetPortDirection>
}
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <SSD_Enable>:

//This function enable the ssd by enabling the common pin 
void SSD_Enable(SSD_Type SSD_Configuration)
{
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <SSD_Enable+0x6>
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <SSD_Enable+0x8>
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	69 83       	std	Y+1, r22	; 0x01
    24d2:	7a 83       	std	Y+2, r23	; 0x02
    24d4:	8b 83       	std	Y+3, r24	; 0x03
    24d6:	9c 83       	std	Y+4, r25	; 0x04
	if ( SSD_Configuration.Type == SSD_COMMON_CATHODE )
    24d8:	89 81       	ldd	r24, Y+1	; 0x01
    24da:	88 23       	and	r24, r24
    24dc:	69 f4       	brne	.+26     	; 0x24f8 <SSD_Enable+0x34>
	{
		 DIO_enumSetPinDirection ( SSD_Configuration.EnablePort, SSD_Configuration.EnablePin , DIO_PIN_OUTPUT );
    24de:	8b 81       	ldd	r24, Y+3	; 0x03
    24e0:	9c 81       	ldd	r25, Y+4	; 0x04
    24e2:	69 2f       	mov	r22, r25
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	0e 94 37 0c 	call	0x186e	; 0x186e <DIO_enumSetPinDirection>
		 DIO_enumSetPinValue		( SSD_Configuration.EnablePort , SSD_Configuration.EnablePin , DIO_PIN_LOW	);
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	9c 81       	ldd	r25, Y+4	; 0x04
    24ee:	69 2f       	mov	r22, r25
    24f0:	40 e0       	ldi	r20, 0x00	; 0
    24f2:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinValue>
    24f6:	0f c0       	rjmp	.+30     	; 0x2516 <SSD_Enable+0x52>
	}
	else if ( SSD_Configuration.Type == SSD_COMMON_ANODE )
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	81 30       	cpi	r24, 0x01	; 1
    24fc:	61 f4       	brne	.+24     	; 0x2516 <SSD_Enable+0x52>
	{
		 DIO_enumSetPinDirection ( SSD_Configuration.EnablePort, SSD_Configuration.EnablePin , DIO_PIN_OUTPUT );
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	9c 81       	ldd	r25, Y+4	; 0x04
    2502:	69 2f       	mov	r22, r25
    2504:	41 e0       	ldi	r20, 0x01	; 1
    2506:	0e 94 37 0c 	call	0x186e	; 0x186e <DIO_enumSetPinDirection>
		 DIO_enumSetPinValue		( SSD_Configuration.EnablePort , SSD_Configuration.EnablePin , DIO_PIN_HIGH	);
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	9c 81       	ldd	r25, Y+4	; 0x04
    250e:	69 2f       	mov	r22, r25
    2510:	41 e0       	ldi	r20, 0x01	; 1
    2512:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinValue>
	}
}
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <SSD_Disable>:

//This Function disable the ssd by disabling the common pin
void SSD_Disable(SSD_Type SSD_Configuration)
{
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	00 d0       	rcall	.+0      	; 0x252a <SSD_Disable+0x6>
    252a:	00 d0       	rcall	.+0      	; 0x252c <SSD_Disable+0x8>
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    2530:	69 83       	std	Y+1, r22	; 0x01
    2532:	7a 83       	std	Y+2, r23	; 0x02
    2534:	8b 83       	std	Y+3, r24	; 0x03
    2536:	9c 83       	std	Y+4, r25	; 0x04
	if ( SSD_Configuration.Type == SSD_COMMON_CATHODE )
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	88 23       	and	r24, r24
    253c:	69 f4       	brne	.+26     	; 0x2558 <SSD_Disable+0x34>
	{
		 DIO_enumSetPinDirection ( SSD_Configuration.EnablePort, SSD_Configuration.EnablePin , DIO_PIN_OUTPUT );
    253e:	8b 81       	ldd	r24, Y+3	; 0x03
    2540:	9c 81       	ldd	r25, Y+4	; 0x04
    2542:	69 2f       	mov	r22, r25
    2544:	41 e0       	ldi	r20, 0x01	; 1
    2546:	0e 94 37 0c 	call	0x186e	; 0x186e <DIO_enumSetPinDirection>
		 DIO_enumSetPinValue		( SSD_Configuration.EnablePort , SSD_Configuration.EnablePin , DIO_PIN_HIGH	);
    254a:	8b 81       	ldd	r24, Y+3	; 0x03
    254c:	9c 81       	ldd	r25, Y+4	; 0x04
    254e:	69 2f       	mov	r22, r25
    2550:	41 e0       	ldi	r20, 0x01	; 1
    2552:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinValue>
    2556:	0f c0       	rjmp	.+30     	; 0x2576 <SSD_Disable+0x52>
	}
	else if ( SSD_Configuration.Type == SSD_COMMON_ANODE )
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	81 30       	cpi	r24, 0x01	; 1
    255c:	61 f4       	brne	.+24     	; 0x2576 <SSD_Disable+0x52>
	{
		 DIO_enumSetPinDirection ( SSD_Configuration.EnablePort, SSD_Configuration.EnablePin , DIO_PIN_OUTPUT );
    255e:	8b 81       	ldd	r24, Y+3	; 0x03
    2560:	9c 81       	ldd	r25, Y+4	; 0x04
    2562:	69 2f       	mov	r22, r25
    2564:	41 e0       	ldi	r20, 0x01	; 1
    2566:	0e 94 37 0c 	call	0x186e	; 0x186e <DIO_enumSetPinDirection>
		 DIO_enumSetPinValue		( SSD_Configuration.EnablePort , SSD_Configuration.EnablePin , DIO_PIN_LOW	);
    256a:	8b 81       	ldd	r24, Y+3	; 0x03
    256c:	9c 81       	ldd	r25, Y+4	; 0x04
    256e:	69 2f       	mov	r22, r25
    2570:	40 e0       	ldi	r20, 0x00	; 0
    2572:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <DIO_enumSetPinValue>
	}
}
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <SSD_SendNumber>:

//This function sends a number to the SSD
void SSD_SendNumber(SSD_Type SSD_Configuration , u8 Number)
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	00 d0       	rcall	.+0      	; 0x258a <SSD_SendNumber+0x6>
    258a:	00 d0       	rcall	.+0      	; 0x258c <SSD_SendNumber+0x8>
    258c:	0f 92       	push	r0
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	69 83       	std	Y+1, r22	; 0x01
    2594:	7a 83       	std	Y+2, r23	; 0x02
    2596:	8b 83       	std	Y+3, r24	; 0x03
    2598:	9c 83       	std	Y+4, r25	; 0x04
    259a:	4d 83       	std	Y+5, r20	; 0x05
	if (SSD_Configuration.Type == SSD_COMMON_CATHODE)
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	88 23       	and	r24, r24
    25a0:	69 f4       	brne	.+26     	; 0x25bc <SSD_SendNumber+0x38>
	{
		 DIO_enumSetPortValue         	(SSD_Configuration.DataPort, Local_SSD_NUMBERS[Number]);
    25a2:	2a 81       	ldd	r18, Y+2	; 0x02
    25a4:	8d 81       	ldd	r24, Y+5	; 0x05
    25a6:	88 2f       	mov	r24, r24
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	fc 01       	movw	r30, r24
    25ac:	e2 55       	subi	r30, 0x52	; 82
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	90 81       	ld	r25, Z
    25b2:	82 2f       	mov	r24, r18
    25b4:	69 2f       	mov	r22, r25
    25b6:	0e 94 58 11 	call	0x22b0	; 0x22b0 <DIO_enumSetPortValue>
    25ba:	11 c0       	rjmp	.+34     	; 0x25de <SSD_SendNumber+0x5a>
	}
	else if (SSD_Configuration.Type == SSD_COMMON_ANODE)
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	81 30       	cpi	r24, 0x01	; 1
    25c0:	71 f4       	brne	.+28     	; 0x25de <SSD_SendNumber+0x5a>
	{
		 DIO_enumSetPortValue         	(SSD_Configuration.DataPort, ~(Local_SSD_NUMBERS[Number]));
    25c2:	2a 81       	ldd	r18, Y+2	; 0x02
    25c4:	8d 81       	ldd	r24, Y+5	; 0x05
    25c6:	88 2f       	mov	r24, r24
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	fc 01       	movw	r30, r24
    25cc:	e2 55       	subi	r30, 0x52	; 82
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	80 81       	ld	r24, Z
    25d2:	98 2f       	mov	r25, r24
    25d4:	90 95       	com	r25
    25d6:	82 2f       	mov	r24, r18
    25d8:	69 2f       	mov	r22, r25
    25da:	0e 94 58 11 	call	0x22b0	; 0x22b0 <DIO_enumSetPortValue>

	}
}
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	0f 90       	pop	r0
    25e6:	0f 90       	pop	r0
    25e8:	cf 91       	pop	r28
    25ea:	df 91       	pop	r29
    25ec:	08 95       	ret

000025ee <SW_Init>:
#include "SW_config.h"
#include "SW_Interface.h"

//This function set the the pin connected to the switch to be input pin 
void SW_Init(SW_Type SW_Config)
{
    25ee:	df 93       	push	r29
    25f0:	cf 93       	push	r28
    25f2:	00 d0       	rcall	.+0      	; 0x25f4 <SW_Init+0x6>
    25f4:	0f 92       	push	r0
    25f6:	cd b7       	in	r28, 0x3d	; 61
    25f8:	de b7       	in	r29, 0x3e	; 62
    25fa:	69 83       	std	Y+1, r22	; 0x01
    25fc:	7a 83       	std	Y+2, r23	; 0x02
    25fe:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection 		(SW_Config.PORT,SW_Config.PIN,DIO_PIN_INPUT	);
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	9a 81       	ldd	r25, Y+2	; 0x02
    2604:	69 2f       	mov	r22, r25
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	0e 94 37 0c 	call	0x186e	; 0x186e <DIO_enumSetPinDirection>
	
	//Enable the Internal PullUp
	if(SW_Config.PULLup_STATE == SW_INT_PULL_UP)
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	88 23       	and	r24, r24
    2610:	31 f4       	brne	.+12     	; 0x261e <SW_Init+0x30>
	{
		//DIO_enumSetPinValue    ( SW_Config.PORT , SW_Config.PIN , DIO_PIN_HIGH  );
		 DIO_enumConnect_Disconnect_Pullup			(SW_Config.PORT , SW_Config.PIN, DIO_PIN_PULLUP_YES);
    2612:	89 81       	ldd	r24, Y+1	; 0x01
    2614:	9a 81       	ldd	r25, Y+2	; 0x02
    2616:	69 2f       	mov	r22, r25
    2618:	41 e0       	ldi	r20, 0x01	; 1
    261a:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <DIO_enumConnect_Disconnect_Pullup>
	}
}
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <SW_GetPressed>:

u8 SW_GetPressed(SW_Type SW_Config)
{
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	00 d0       	rcall	.+0      	; 0x2630 <SW_GetPressed+0x6>
    2630:	00 d0       	rcall	.+0      	; 0x2632 <SW_GetPressed+0x8>
    2632:	0f 92       	push	r0
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	6b 83       	std	Y+3, r22	; 0x03
    263a:	7c 83       	std	Y+4, r23	; 0x04
    263c:	8d 83       	std	Y+5, r24	; 0x05
	u8 Data;
	u8 Result = SW_NotPressed;
    263e:	19 82       	std	Y+1, r1	; 0x01
	if((SW_Config.PULLup_STATE == SW_EXT_PULL_UP) || (SW_Config.PULLup_STATE == SW_INT_PULL_UP))
    2640:	8d 81       	ldd	r24, Y+5	; 0x05
    2642:	81 30       	cpi	r24, 0x01	; 1
    2644:	19 f0       	breq	.+6      	; 0x264c <SW_GetPressed+0x22>
    2646:	8d 81       	ldd	r24, Y+5	; 0x05
    2648:	88 23       	and	r24, r24
    264a:	89 f4       	brne	.+34     	; 0x266e <SW_GetPressed+0x44>
	{
		DIO_enumGetPinValue				(SW_Config.PORT,SW_Config.PIN, &Data	);
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	9c 81       	ldd	r25, Y+4	; 0x04
    2650:	9e 01       	movw	r18, r28
    2652:	2e 5f       	subi	r18, 0xFE	; 254
    2654:	3f 4f       	sbci	r19, 0xFF	; 255
    2656:	69 2f       	mov	r22, r25
    2658:	a9 01       	movw	r20, r18
    265a:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumGetPinValue>
		if((Data)==1)
    265e:	8a 81       	ldd	r24, Y+2	; 0x02
    2660:	81 30       	cpi	r24, 0x01	; 1
    2662:	11 f4       	brne	.+4      	; 0x2668 <SW_GetPressed+0x3e>
		{
			Result = SW_NotPressed ;
    2664:	19 82       	std	Y+1, r1	; 0x01
    2666:	16 c0       	rjmp	.+44     	; 0x2694 <SW_GetPressed+0x6a>
		}
		else
		{
			Result = SW_Pressed ;
    2668:	81 e0       	ldi	r24, 0x01	; 1
    266a:	89 83       	std	Y+1, r24	; 0x01
    266c:	13 c0       	rjmp	.+38     	; 0x2694 <SW_GetPressed+0x6a>
		}
	}
	else if (SW_Config.PULLup_STATE == SW_EXT_PULL_DOWN)
    266e:	8d 81       	ldd	r24, Y+5	; 0x05
    2670:	82 30       	cpi	r24, 0x02	; 2
    2672:	81 f4       	brne	.+32     	; 0x2694 <SW_GetPressed+0x6a>
	{
		DIO_enumGetPinValue				(SW_Config.PORT,SW_Config.PIN, &Data	);
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	9c 81       	ldd	r25, Y+4	; 0x04
    2678:	9e 01       	movw	r18, r28
    267a:	2e 5f       	subi	r18, 0xFE	; 254
    267c:	3f 4f       	sbci	r19, 0xFF	; 255
    267e:	69 2f       	mov	r22, r25
    2680:	a9 01       	movw	r20, r18
    2682:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DIO_enumGetPinValue>
		if((Data)==1)
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	81 30       	cpi	r24, 0x01	; 1
    268a:	19 f4       	brne	.+6      	; 0x2692 <SW_GetPressed+0x68>
		{
			Result = SW_Pressed ;
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	01 c0       	rjmp	.+2      	; 0x2694 <SW_GetPressed+0x6a>
		}
		else
		{
			Result = SW_NotPressed ;
    2692:	19 82       	std	Y+1, r1	; 0x01
		}
	}


	return Result;
    2694:	89 81       	ldd	r24, Y+1	; 0x01
}
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	0f 90       	pop	r0
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <main>:
#include <avr/delay.h>



void main(void)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
    26ae:	2e 97       	sbiw	r28, 0x0e	; 14
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	de bf       	out	0x3e, r29	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	cd bf       	out	0x3d, r28	; 61
	Void_App_Init();
    26ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <Void_App_Init>
	while(1)
	{
		Void_ClearScreen               ();
    26be:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <Void_ClearScreen>
		Void_Mode_Task();
    26c2:	0e 94 93 07 	call	0xf26	; 0xf26 <Void_Mode_Task>
    26c6:	80 e0       	ldi	r24, 0x00	; 0
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	a8 ec       	ldi	r26, 0xC8	; 200
    26cc:	b2 e4       	ldi	r27, 0x42	; 66
    26ce:	8b 87       	std	Y+11, r24	; 0x0b
    26d0:	9c 87       	std	Y+12, r25	; 0x0c
    26d2:	ad 87       	std	Y+13, r26	; 0x0d
    26d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    26da:	8d 85       	ldd	r24, Y+13	; 0x0d
    26dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	4a ef       	ldi	r20, 0xFA	; 250
    26e4:	54 e4       	ldi	r21, 0x44	; 68
    26e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	8f 83       	std	Y+7, r24	; 0x07
    26f0:	98 87       	std	Y+8, r25	; 0x08
    26f2:	a9 87       	std	Y+9, r26	; 0x09
    26f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26f6:	6f 81       	ldd	r22, Y+7	; 0x07
    26f8:	78 85       	ldd	r23, Y+8	; 0x08
    26fa:	89 85       	ldd	r24, Y+9	; 0x09
    26fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e8       	ldi	r20, 0x80	; 128
    2704:	5f e3       	ldi	r21, 0x3F	; 63
    2706:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    270a:	88 23       	and	r24, r24
    270c:	2c f4       	brge	.+10     	; 0x2718 <main+0x72>
		__ticks = 1;
    270e:	81 e0       	ldi	r24, 0x01	; 1
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	9e 83       	std	Y+6, r25	; 0x06
    2714:	8d 83       	std	Y+5, r24	; 0x05
    2716:	3f c0       	rjmp	.+126    	; 0x2796 <main+0xf0>
	else if (__tmp > 65535)
    2718:	6f 81       	ldd	r22, Y+7	; 0x07
    271a:	78 85       	ldd	r23, Y+8	; 0x08
    271c:	89 85       	ldd	r24, Y+9	; 0x09
    271e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2720:	20 e0       	ldi	r18, 0x00	; 0
    2722:	3f ef       	ldi	r19, 0xFF	; 255
    2724:	4f e7       	ldi	r20, 0x7F	; 127
    2726:	57 e4       	ldi	r21, 0x47	; 71
    2728:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    272c:	18 16       	cp	r1, r24
    272e:	4c f5       	brge	.+82     	; 0x2782 <main+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2730:	6b 85       	ldd	r22, Y+11	; 0x0b
    2732:	7c 85       	ldd	r23, Y+12	; 0x0c
    2734:	8d 85       	ldd	r24, Y+13	; 0x0d
    2736:	9e 85       	ldd	r25, Y+14	; 0x0e
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	40 e2       	ldi	r20, 0x20	; 32
    273e:	51 e4       	ldi	r21, 0x41	; 65
    2740:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2744:	dc 01       	movw	r26, r24
    2746:	cb 01       	movw	r24, r22
    2748:	bc 01       	movw	r22, r24
    274a:	cd 01       	movw	r24, r26
    274c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2750:	dc 01       	movw	r26, r24
    2752:	cb 01       	movw	r24, r22
    2754:	9e 83       	std	Y+6, r25	; 0x06
    2756:	8d 83       	std	Y+5, r24	; 0x05
    2758:	0f c0       	rjmp	.+30     	; 0x2778 <main+0xd2>
    275a:	88 ec       	ldi	r24, 0xC8	; 200
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	9c 83       	std	Y+4, r25	; 0x04
    2760:	8b 83       	std	Y+3, r24	; 0x03
    2762:	8b 81       	ldd	r24, Y+3	; 0x03
    2764:	9c 81       	ldd	r25, Y+4	; 0x04
    2766:	01 97       	sbiw	r24, 0x01	; 1
    2768:	f1 f7       	brne	.-4      	; 0x2766 <main+0xc0>
    276a:	9c 83       	std	Y+4, r25	; 0x04
    276c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276e:	8d 81       	ldd	r24, Y+5	; 0x05
    2770:	9e 81       	ldd	r25, Y+6	; 0x06
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	9e 83       	std	Y+6, r25	; 0x06
    2776:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2778:	8d 81       	ldd	r24, Y+5	; 0x05
    277a:	9e 81       	ldd	r25, Y+6	; 0x06
    277c:	00 97       	sbiw	r24, 0x00	; 0
    277e:	69 f7       	brne	.-38     	; 0x275a <main+0xb4>
    2780:	9e cf       	rjmp	.-196    	; 0x26be <main+0x18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2782:	6f 81       	ldd	r22, Y+7	; 0x07
    2784:	78 85       	ldd	r23, Y+8	; 0x08
    2786:	89 85       	ldd	r24, Y+9	; 0x09
    2788:	9a 85       	ldd	r25, Y+10	; 0x0a
    278a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	9e 83       	std	Y+6, r25	; 0x06
    2794:	8d 83       	std	Y+5, r24	; 0x05
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	9a 83       	std	Y+2, r25	; 0x02
    279c:	89 83       	std	Y+1, r24	; 0x01
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	9a 81       	ldd	r25, Y+2	; 0x02
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <main+0xfc>
    27a6:	9a 83       	std	Y+2, r25	; 0x02
    27a8:	89 83       	std	Y+1, r24	; 0x01
    27aa:	89 cf       	rjmp	.-238    	; 0x26be <main+0x18>

000027ac <__prologue_saves__>:
    27ac:	2f 92       	push	r2
    27ae:	3f 92       	push	r3
    27b0:	4f 92       	push	r4
    27b2:	5f 92       	push	r5
    27b4:	6f 92       	push	r6
    27b6:	7f 92       	push	r7
    27b8:	8f 92       	push	r8
    27ba:	9f 92       	push	r9
    27bc:	af 92       	push	r10
    27be:	bf 92       	push	r11
    27c0:	cf 92       	push	r12
    27c2:	df 92       	push	r13
    27c4:	ef 92       	push	r14
    27c6:	ff 92       	push	r15
    27c8:	0f 93       	push	r16
    27ca:	1f 93       	push	r17
    27cc:	cf 93       	push	r28
    27ce:	df 93       	push	r29
    27d0:	cd b7       	in	r28, 0x3d	; 61
    27d2:	de b7       	in	r29, 0x3e	; 62
    27d4:	ca 1b       	sub	r28, r26
    27d6:	db 0b       	sbc	r29, r27
    27d8:	0f b6       	in	r0, 0x3f	; 63
    27da:	f8 94       	cli
    27dc:	de bf       	out	0x3e, r29	; 62
    27de:	0f be       	out	0x3f, r0	; 63
    27e0:	cd bf       	out	0x3d, r28	; 61
    27e2:	09 94       	ijmp

000027e4 <__epilogue_restores__>:
    27e4:	2a 88       	ldd	r2, Y+18	; 0x12
    27e6:	39 88       	ldd	r3, Y+17	; 0x11
    27e8:	48 88       	ldd	r4, Y+16	; 0x10
    27ea:	5f 84       	ldd	r5, Y+15	; 0x0f
    27ec:	6e 84       	ldd	r6, Y+14	; 0x0e
    27ee:	7d 84       	ldd	r7, Y+13	; 0x0d
    27f0:	8c 84       	ldd	r8, Y+12	; 0x0c
    27f2:	9b 84       	ldd	r9, Y+11	; 0x0b
    27f4:	aa 84       	ldd	r10, Y+10	; 0x0a
    27f6:	b9 84       	ldd	r11, Y+9	; 0x09
    27f8:	c8 84       	ldd	r12, Y+8	; 0x08
    27fa:	df 80       	ldd	r13, Y+7	; 0x07
    27fc:	ee 80       	ldd	r14, Y+6	; 0x06
    27fe:	fd 80       	ldd	r15, Y+5	; 0x05
    2800:	0c 81       	ldd	r16, Y+4	; 0x04
    2802:	1b 81       	ldd	r17, Y+3	; 0x03
    2804:	aa 81       	ldd	r26, Y+2	; 0x02
    2806:	b9 81       	ldd	r27, Y+1	; 0x01
    2808:	ce 0f       	add	r28, r30
    280a:	d1 1d       	adc	r29, r1
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	f8 94       	cli
    2810:	de bf       	out	0x3e, r29	; 62
    2812:	0f be       	out	0x3f, r0	; 63
    2814:	cd bf       	out	0x3d, r28	; 61
    2816:	ed 01       	movw	r28, r26
    2818:	08 95       	ret

0000281a <_exit>:
    281a:	f8 94       	cli

0000281c <__stop_program>:
    281c:	ff cf       	rjmp	.-2      	; 0x281c <__stop_program>
